Opening Monopolies
Potential cover quotes:
“It comes down to trying to expose yourself to the best things that humans have done and then try[ing] to bring those things into what you’re going. Picasso had a saying, ‘Good artists copy. Great artists steal.’ And we have always been shameless about stealing great ideas.”
-Steve Jobs, 1996, http://www.youtube.com/watch?v=CW0DUg63lqU


“The great danger to the consumer is the monopoly -- whether private or governmental. His most effective protection is free competition at home and free trade throughout the world. The consumer is protected from being exploited by one seller by the existence of another seller from whom he can buy and who is eager to sell to him. Alternative sources of supply protect the consumer far more effectively than all the Ralph Naders of the world.”
-Milton Friedman, on the Phil Donohue Show in 1979


“If [libertarians] are not willing to be part of the market `invisible hand' that non-coercively punishes Microsoft for its misbehavior, we invite the argument that only coercion will do.”
-Eric S. Raymond


"Open source is an intellectual-property destroyer. I can't imagine something that could be worse than this for the software business and the intellectual-property business.”
-Jim Allchin, former Microsoft executive, 2001


“These companies spend a lot of money on market analysis, and they understand that, in the end, there will be a monopoly again. The one-winner principle still applies. To them, the world will not change greatly whether open-source or proprietary software is running the world's computers. The end result will still be decreasing average costs, and the same barriers to entering the market will still apply.
What is different, however, is that in an open-source monopoly the barriers to participation and influence will disappear. This will be a different kind of monopoly--an "open monopoly"--from which no vendor can be excluded from participating, including the big companies now joining the open-source movement. They have much more to gain by breaking the existing monopoly and replacing it with the new open monopoly.”
-Petr Hrebejk and Tim Boudreau, 2001, http://news.cnet.com/2010-1071-281588.html




________________


Table of Contents
Introduction
1. Preface
Why Software
2. Introduction
The Intellectual Property Version
On Intellectual Monopolies
3. Everyone Agrees: Monopolies are Bad
4. Why Even Pro-IP Free Marketeers Should Agree
5. A Crash Course in Libertarian Anti-IP Theory
The Utilitarian Case
The Natural Rights Case
Software Licenses
6. Brief History of Proprietary Software
7. Richard Stallman, GNU and the Free Software Movement
9. Open Source Software
10. Permissive and Copyfree Licenses
The Criteria of Choice
11. The Criteria of Choice
12. The Harm from Closed Source
13. Software Network Effects
14. Agency Harm and the Power of Your Choice
15. Reinventing the Wheel Harm and Copyleft Virality
8. Copyleft and the problems with the GNU GPL
The Software Choices
16. Operating Systems
17. Browsers and Web Standards
18. Office Suites
19. Web Video and Audio Formats
Conclusion
20. Answers to Common Objections
You are a hypocrite because this book is copyrighted
21. Conclusion
21. Epilogue - Why Open Monopolies Will Win
________________
Introduction
1. Preface
In 2001, Petr Hrebejk and Tim Boudreau[1] wrote an article published on CNet.com titled “The coming "open monopoly" in software” that argued the economics of software development will inevitably results open source software out competing restricted proprietary software and that despite their best efforts, vendors like Microsoft will be powerless to stop it.[2] The resulting open monopoly would be one where any software vendor could easily compete in the market because of the dominance of open source software and standards. For whatever reason, the term “open monopoly” never caught on. It could be said that the term fell well short of monopoly status.
With the clarity of the 11 years of seeing the software industry evolve, it can be safely said that Hrebejk and Boudreau were almost certainly correct. While it is true that in some software markets we are not much closer in terms of market share to even seeing an open source competitor to the top proprietary software offerings, the operating systems market comes to mind, the economics appear to clearly favor a trend in the open source direction. The march may be long, but the destination appears inevitable.
While this book was well underway when I first ran across their article, it provided the perfect answer to a question I had been struggling with. The lack of a good term to describe the central premise of the book. Free software, open source software and copyfree licenses are all terms that were closely related to the ideas I wanted to convey, but all three have very specific meanings that in the cases of free software and open source are already very well established and in all three cases vary from the ideas I wanted to convey.
I had internally wrestled with calling it Against Software Monopoly as a homage to Stephan Kinsella's Against Intellectual Monopoly and Michele Boldrin and David Levine's Against Intellectual Monopoly and that was even the working title of the draft copy when I was first working on it.
Against Intellectual Monopoly is a book by Washington University - St. Louis economists Michele Boldrin and David K. Levine that tackles the question of whether or not copyright and patent laws actually encourage innovation and creation from a purely utilitarian perspective.[3] Like most economists, the question they seek to answer to is whether or not society is made collectively better off by the existence of government monopolies over intellectual creations. As can easily be discerned from the title, their conclusion is a resounding negative.
“Against Intellectual Property” by Stephan Kinsella was first published in the Journal of Libertarian Studies in 2001 and approaches intellectual property law from a perspective that could hardly be more different than Boldrin and Levine.[4] Starting with basic libertarian principles such as property rights and self-ownership, Kinsella makes the case that intellectual property rights are not property rights at all and that the state has no business handing out such monopolies on a moral or ethical basis.
Though, I owe a great debt of gratitude to the arguments laid out by Boldrin, Levine and Kinsella for starting me on the intellectual journey that would lead me to formulate the arguments I lay out in this book, making the title exclusive a homage to their works doesn't quite fit because the arguments I make by no means exclusively apply to opponents of the existence of copyright and patents. In fact, the first chapter of the next section makes the case that the foundations of my arguments lie not in opposition to intellectual property, but in the basic opposition to a private monopoly over a good or service.
Instead of seeking to answer the question “should I be opposed to copyrights and patents?” as they do, this book attempts to answer the question “now that I am opposed to copyright, what can I do about it?” Rather than attempting to tackle or expand on the theoretical or empirical foundations of arguments in support of or opposed to the establishment of intellectual property, this book takes what is the logical next step, the application of such ideas to human action.[5]
In some ways I felt as though it was more in the tradition of libertarian author and anarchist activist Samuel Edward Konkin III, often shorthanded to SEK3, who wrote the New Libertarian Manifesto, which advocated an approach to resisting government outside of the political system. The srategy, called agorism, called for operating as often as possible outside of government purview in black and gray markets, named counter-economics. Agorism and counter-economics provided the inspiration for J. Neil Schulman’s excellent novel Alongside Night, representing to agorism what Atlas Shrugged is for Objectivism.[6]
However, as Murray Rothbard argued,[7] some people have professions that does not easily allow one to live on the black market, other situations in their personal lives that limit their ability to live outside government oversight or just are not willing to risk taking on the IRS and ending up in prison alongside Irwin Schiff.[8]
Rather than advocating complete withdrawal from interaction with the state, this book merely advocates software choices to help free software from the binds of intellectual property restrictions. Like Konkin's essay, this book attempts to apply the libertarian theories of the economists and political philosophers that came before him into a course of action to bring out the desired ends outside the system of politics.
Though the book is certainly much closer to Jeffrey Tucker’s Bourbon for Breakfast[9] with perhaps some of the culturally libertarian vibes celebrated in Matt Welch and Nick Gillespie's Declaration of Independents than Konkin’s New Libertarian Manifesto in terms of its accessibility and radical nature, this is book is not a guide to improving your own life. It is true that some of the suggestions I will make will save you money and improve your computing experience, others might require some sacrifice whether it is your time or a bit of functionality. It is in some respects the best of both worlds, the accessibility to the average person of Tucker’s lifestyle changes with the systemic and broader implications of Konkin’s manifesto.
The book also could perhaps be analogized to Richard Stallman's “GNU Manifesto” that laid out the founding principles of the free software movement. Like his essay, this book will contain not only a philosophical basis, but the beginnings of the technical instructions to get there. The idea of a title that alluded to both Konkin and Stallman's works was alluring.
The problem was still that there was no word or term to put in front of “Manifesto” in the title. Part of the book criticizes the some of ideas that free software and open source have come to stand for. Copyfree has the right idea, but this book really isn't the “Copyfree Manifesto” in the same way that Stallman's essay is the “GNU Manifesto.” It advocates a range of software choices, some copyfree, some not, and contains much more analysis. I decided to leave that title for a much more narrow, hypothetical future work than this book if the term copyfree catches on to describe the most permissive of software licenses.
When I found the Hrebejk and Boudreau article, open monopoly stepped into fill the gap in terminology that I had been trying to plug. However, titling the book just Open Monopoly was insufficient as well. 
First of all, there is no consensus about the definition of an open monopoly. In the traditional sense, the monopolist is a person or corporation,[10] the question of whether or not a piece of open software or an open software standard without an owner in the traditional sense can become a monopolist is not one I wished to deal with. Google searches and looking at the use of the term in academic literature fails to help. One college economics class PowerPoint slide defines it as a monopolist who lacks either legal protection and is able to establish a monopoly without natural monopoly conditions.[11] A 2000 paper defines an “open monopoly environment” as “an environment in which competition is possible.”[12] A 2012 paper comparing proprietary and open source monopolies refers to “open monopoly platforms” which are open platforms that achieve monopoly status, a comparable use of the term to that by Hrebejk and Boudreau. All of the definitions are related, but clearly different.
Secondly, it failed to truly capture the spirit of the book. The book is not just about what is an open monopoly or the economics of them. Using a singular noun as the title just didn’t fit. It is about creating an open monopoly, in fact creating many, whichever definition of them happens to emerge.
However, using the verb and plural forms of the words to title the book Opening Monopolies nearly perfectly captured my vision for the book. This is a book that is not just about the idea of freeing software markets from the binds of intellectual property restrictions, it is about the choices that can be made to do so.
As I have alluded to throughout this preface, the central premise of this book is to be a guide for libertarians to making decisions about software and the accompanying technology in a way that minimizes the impact and influence of intellectual property on both the software you use and on the broader software market as a whole.
In some cases, which software choice is better from the intellectual property perspective is unclear. In some cases there exist complex relationships between multiple pieces of software that have different licenses and have different patent statuses. In the coming chapters I will develop a framework of criteria the provides some guidance, but in both developing that framework and handling complex issues, it can be very helpful to keep in mind just exactly why we care about intellectual property in the first place. 
Though there certainly exists multiple reasons to oppose the existence of intellecutal property, this book is written from the libertarian perspective that it is not a legitimate form of property and impedes the functioning of the free market. Thus, when in the questions of intellectual property are in doubt, the answers will be found by looking to the choice that most reduces barriers to free market exchanges.[a]
The book starts off with a section that lays out the broad philosophical foundations of why one ought to oppose the existence of proprietary software monopolies. As I have mentioned, my own thoughts draw heavily upon libertarian ideas that cause me to oppose the existence of all copyrights and patents. However, this book is not aimed at only the audience of those who agree with me on those contentions. In what is perhaps circumstantial evidence that all supporters of free markets ought to oppose intellectual property as well, the fundamental foundations of the arguments are really grounded in the same opposition to monopoly that leads virtually everyone to oppose monopolies in general.
So broad, in fact, are these ideological foundations that could be used in support of many of these arguments, that some of the individuals who I will mention in this book reach many of the same conclusions that I do from a leftist, communitarian, anti-business perspective.[13] This book focuses more on the differences than similarities with such views and instead approaches the subject from a free market perspective.
Also contained in this section of the book are chapters outlining the basic arguments of anti-IP libertarians from both utilitarian and natural rights perspectives. In recognition that not all libertarians or free market supporters agree with those positions, there is also a chapter outlining why even support of intellectual property in general from either a utilitarian or natural rights perspective ought not stop one from agreeing that software monopolies ought to be opened up.
The next grouping of chapters moves into a discussion of software licenses and their histories. Rather than focusing on the legal aspects of the licenses, these chapters primarily concentrate on the history behind the licenses and the functional aspects of them. Separating the general background of the licenses from the comparisons of the software they are applied to helps to make that discussion flow more smoothly.
The following section establishes a framework in which to compare various software options. [b]It discusses the advantages of open source, the problems with 
Finally, the last group of chapters is the core of this book's purpose. Each one deals with a different area of software and explains the major software options, their licenses and explains which choices you can make to free up the entire software market from those who want to use intellectual property to restrict competition, reduce your choices as a consumer and ultimately provide a lower quality product.
Before I continue, I do want to acknowledge that while anti-IP libertarians such as Kinsella, Boldrin and Levine are largely responsible for my initial interest in software IP advocacy, it is really the open source community and most notably hacker, open source evangelist and libertarian Eric S. Raymond to whom my work here owes the greatest intellectual debt. Without much of his pioneering insights into open source software from a libertarian perspective, this book would be no where close to its current quality.
Why Software
In the world of computer software, I am much more of a consumer than a creator. Though I have programmed a bit, my skill level comes nowhere close to even understanding the majority of software I use, much less recreating it or even improving upon it.
30 years ago, I’m not sure there would have been much of a reason for me to even consider the patents and licenses that governed the various software options I might use[c]. Why should I have cared if the driver my new printer came with included a copy of the source code that would allow me to modify and make changes to the program as long as it included a functioning executable binary that I could install to allow me to print something from my computer? If I found a reason to modify or improve the code, I'm not knowledgeable enough to do so in the first place.
However in 2012, there are compelling reasons why even the average software consumer ought to care about the intellectual property that governs the software you use. Aside from my own personal interest in the subject, there are several reasons for choosing the course of software choices as a course of activism to reform intellectual property.
Decisions on what software to use are already made by hundreds of millions of Americans. I am not asking you to do something new, merely to take into account new information when you make the choices you already do. Whether it is a conscious decision or not, you make the choice of which browser to use every time you open one. You choose an operating system every time that you buy a new computer. Compared to pushing for political change by calling up your Congressman, protesting or campaign work, choosing a new browser or installing a new word processing program is incredibly easy.
The choices you make as a consumer of computer software also have a real and widespread impact. Advocates of the free market often make the case that if individuals really want something, preserving their ability to vote with the dollars in market interactions is the best way to insure it happens. In few markets is this as true as the market for software and few places can you make those choices sitting in a chair at home for free.
The market for software is one that is made especially less free than most by intellectual property. Innovation in computer software industry occurs at such a rapid pace that providing patent protection for 20 years means that by the time a patent expires, the technology is almost certain to have been replaced anyways. The rapid pace of innovation, little to no impact from expiring patents and the triviality of
Finally, outside of the political system, there are few things other than education – which is usually just the means to a political ends – that a libertarian can do to create a more libertarian world.








________________
2. Introduction
One of the most critical moments in the history of Internet innovation was the period in the late 1990’s when Microsoft seemed poised to vanquish Netscape’s Communicator browser to the dustbin of computer programs and assume complete dominance over the browser market through its Internet Explorer web browser. 
On May 18, 1998, the United States Justice Department under the direction of Attorney General Janet Reno in conjunction with the Attorney Generals of 20 states and the District of Columbia filed suit against Microsoft, charging them “with engaging in anticompetitive and exclusionary practices designed to maintain its monopoly in personal computer operating systems and to extend that monopoly to Internet browsing software.”[14] 
Libertarians at the time were justifiably outraged at the use of antitrust law to interfere in the market. Many free market advocates rushed to Microsoft’s side because they represented the private sector under outright and open attack by the government. Over the next several years a plethora of literature condemning antitrust laws was published by libertarians scholars with a wide range of affiliations.[15]
Most of them stuck to condemning the antitrust suit and the political rent seeking of Microsoft’s competitors.[16] However, the key argument in nearly all of them to emphasize the absurdity of the claims that the only barrier to entry for browsers trying to compete with Internet Explorer was 2 or 3 clicks of the mouse to install them. While that was certainly true at the time, it was not representative of the future threat. Many programmers understood the threat. With the exception of those who qualify as such programmers, few libertarians did.
A couple of libertarians writing against the antitrust suits went even further than just condemning the governments action, they asserted or implied that consumers would be made better off if Microsoft were left to rule the world of computer software.
Cato Institute senior fellow Robert A. Levy asserted in a policy paper early in 1998 that:
Never mind that Windows became the industry standard because PC makers thought it was a "superior" product -- an assessment that surely took into account the entire array of product features, not only technical features but also ease of use, quality, price, service, and contract terms. Never mind that consumers shared that view. Never mind that there were no barriers to entry that would prevent a competitor from ousting Windows as the market leader. Those considerations, apparently, did not impress DOJ's Antitrust Division.[17]
Mises Institute adjunct scholar Christopher Westley wrote about the preference of economists for Microsoft’s Internet Explorer web browser over rival Netscape’s Navigator browser because of Netscape’s political rent seeking.[18]
Lew Rockwell praised Microsoft as “one of the great success stories in the history of American enterprise.”[19]
The threat is perhaps best explained through the lens of a topic of discussion libertarians are more familiar with. Mayer Amschel Rothschild, founder of the Rothschild international Banking Dynasty, infamously said in 1790, “Permit me to issue and control the money of a nation and I care not who makes the laws.” The Internet equivalent of this quote would be something along the lines of “Permit me to control the specification of Internet standards and I care not who is permitted to write the software.” 
It doesn’t matter who can write the software because the standard is all of the power. Though just like it is the laws that decide who is permitted to control the money, it is the developers of Internet software that control who writes the standards because the standards are meaningless unless the software conforms to them. In short, the end goal of Microsoft was not dominance of the web browser market. Control of the browser market is a means to a different ends, a world where competing with Microsoft software would mean the creation of an entirely separate computer ecosystem and short of a government edict, perhaps the largest barriers to entry into the software market that could ever be constructed.
This is no conspiracy theory either. Internal Microsoft documents spell out their plans quite clearly. Exhibit A of their plans was featured in the press release from the Justice Department that announced the filing of the lawsuit:
This threat was described by Microsoft CEO Bill Gates in a 1995 warning to Microsoft executives:
"A new competitor "born" on the Internet is Netscape. Their browser is dominant, with a 70% usage share, allowing them to determine which network extensions will catch on. They are pursuing a multi-platform strategy where they move the key API [applications programming interface] into the client to commoditize the underlying operating system."[20]
Though the word commoditize is probably more commonly used by the far left to deride the use of free market pricing to allocate resources in areas they don’t approve such as education or health care, but that is not the meaning in the context in which Gates uses it in the memo. What he means is that the approach of Netscape would make the market for the underlying operating system on which the browser ran more like a commodities market. Just like commodity markets treat raw materials like a bushel of corn or a barrel of oil as essentially the same, the separation of features between the operating system and the browser means that any operating system can access all of the features of the Internet and becomes less unique to the user. If a Netscape browser can provide the same Internet experience on any operating system, it becomes much easier for new or currently less successful operating systems to steal market share from Windows.
To frame the discussion in the context of economic models, commodization of various software markets would push it closer towards perfect competition and away from a monopolistic one. Though a software market can never end up as a perfectly competitive market in the same sense that the markets for corn or oil are nor is it likely that a consumer would ever truly be stuck with only a single choice of operating system or word processor, the distinction is meaningful. On one end of the spectrum is a world where features can be implemented by any software developer and the consumer is left to pick and choose which software they prefer. At the other end is a software market where some hurdle prevents certain features from appearing in the software of all but one developer. This hurdle could be political in nature, such as a regulation; have its basis in intellectual property, such as a patent; or technological in nature, such as an undocumented API or protocal that only one firm is able to access.
For someone unfamiliar with many of the features and technologies that go into making a browser, it might be hard to grasp why the dominance of one browser that was only available for a single operating system was such a big deal back then. After all in today’s browser market, Internet Explorer is only available on Windows and Safari only on Macs. The Internet experience is nearly identical whether one uses either of those browsers or Chrome or Firefox which are available across multiple operating systems.
The answer is simply that those people who wanted to commodify operating systems and internet browsers won and Microsoft lost. Before you start thinking this is some perverse attempt to justify the antitrust lawsuit, let me assure you that it’s not. 
It turns out that the antitrust lawsuit did nothing to stop Internet Explorer from coming to utterly dominate the browser market. Though market share of browsers is difficult to calculate and the survey methodology used in the late 90’s made it even worse, estimates of IE’s use in 1997, before the lawsuit was filed, placed it at somewhere between about 20% and 30% with Netscape Navigator representing all but about 5% of the remaining market share.[21] By 2004, well after the antitrust lawsuit had concluded, all estimates of IE use had the browser capturing over 90% of the market, one estimate had it as high as 96%.[22]
Before we can discuss why the disastrous things predicted by the opponents of Microsoft’s market dominance failed to come to fruition, it’s important to discuss what exactly those things were.
The previously quoted internal memo from Bill Gates is not the only look at internal Microsoft strategy. During the last week of October, 1998 an internal Microsoft memorandum was leaked to Eric Raymond who annotated it over Halloween weekend and released it on November 1st calling it the “Halloween Document.”[23] It contained more details about Microsofts plans to “de-commoditize” key protocols to fend off competition from open source software (OSS):
De-commoditize protocols & applications
OSS projects have been able to gain a foothold in many server applications because of the wide utility of highly commoditized, simple protocols. By extending these protocols and developing new protocols, we can deny OSS projects entry into the market.
David Stutz makes a very good point: in competing with Microsoft's level of desktop integration, "commodity protocols actually become the means of integration" for OSS projects. There is a large amount of IQ being expended in various IETF working groups which are quickly creating the architectural model for integration for these OSS projects.[24]
The IETF that is referenced is the Internet Engineering Task Force, a group dedicated to the developing and promoting Internet standards. For example, if you have ever tried to visit a page on a website that does not exist, no matter what operating system and browser you use or what operating system is used by the server hosting the website, you will receive an error message that reads something like “404 Error: Page Not Found.” Why is it always a 404 error? Because that’s what the IETF decided the error number should be.[25]
As Raymond explains in his annotations, “In other words, open protocols must be locked up and the IETF crushed in order to de-commoditize protocols & applications and stop open-source software.”[26] The idea is to get people, in this case especially corporate customers, to start using closed, undocumented or insufficiently detailed standards that only Microsoft can access or easily use and create a potentially insurmountable technical standard for competitors.
Microsoft’s strategy was to lock in their customers, so that they would have no choice but to keep buying their products and exploit network effects to use their market dominance to lure in even more people. From a libertarian perspective, technological barriers to competition and market entry provide no issue because they are not based on an advantage conferred on them by government. 
However, for those who support free markets because of the innovation and prosperity they create as the result of choice and competition, it is not clear that artificial technical barriers are any more acceptable than unlibertarian political barriers. Whether I am unable to choose to use software I prefer because its use or development is forbidden by the government or a comparable situation is created by a technical barrier implemented by a developer, not to provide new desirable features, but purely to lock-in users or prevent the development of software that can provide the same features on the same platform, the outcome is essentially unchanged.
If the idea that Microsoft lost the war for control over Internet standards despite winning the battle for control of the browser market, doesn’t quite make sense, that’s because the true goal hasn’t yet been mentioned, the server market. Since browsers have long been given away for free rather than sold, victory in the browser battle meant little for Microsoft’s bottom line. Browsers were just the means to the high ground in the much more lucrative battle taking place in the server market.
As Eric Raymond explained:
For Netscape, the issue was less browser-related income (never more than a small fraction of their revenues) than maintaining a safe space for their much more valuable server business. If Microsoft's Internet Explorer achieved market dominance, Microsoft would be able to bend the Web's protocols away from open standards and into proprietary channels that only Microsoft's servers would be able to service.
Despite Microsoft’s utter dominance in capturing a greater than 90% share of both the operating system[27] and browser markets in the years following the antitrust lawsuit, they never managed to come anywhere close in the server market. Measuring the number of servers running various operating systems is a difficult task because not every server continues to run the same operating system that it was sold with. However, more important, and more easily measurable, than the operating system was the software that powered the websites hosted on the server. That data is easier to gather and from it we know that the the open source Apache web server has been since dominant 1996. Measured by number of domain names running the software, Microsoft’s server offerings have never managed to top 40% of the market and Apache has maintained more than 50% of the market for more than a decade.[28]
Who was behind Apache that allowed it to take on Microsoft and win? Essentially just 8 server administrators and their email list exchanging patches to the NCSA HTTPd server software that they were running.[29] Of course over time, it would grow to involve many more people, but the core development model never changed much.
As long as Apache controlled a majority of the server market, Microsoft would need them to go along with any changes to standard Internet protocols. As long as Apache remained open source and largely running on Linux powered servers, Microsoft’s “embrance and extend” strategy couldn’t use Apache to bend protocols into closed, proprietary channels.
A libertarian might read this story and proclaim that it is yet another example of the triumph of the free market, though it runs somewhat contrary to the narrative that the freedom Microsoft won to continue its monopolies in the face of the antitrust suit was a victory for the market. In a general sense that claim is essentially correct. However, such a description conceals just who the free market was in this case, essentially a bunch of computer programmers acting deliberately together to keep the Internet open and give people a choice of software to use it with.
As Virgina Postrel somewhat predictively wrote in Reason in 1999:
At stake is what Eric S. Raymond, editor of "The New Hacker's Dictionary" and a Linux evangelist, calls a quasi-political question: "Will the Internet culture tolerate single-vendor monopolies on critical infrastructure or not?" The answer appears to be no. Internet culture will work to undermine monopolies. And it will do so faster, and more harmoniously with the fluid nature of the technical world, than will lawyers.[30]
Perhaps, the culture 
 As libertarian, computer programmer Eric Raymond explained in November of 1998:
Libertarians must be willing to forthrightly condemn such behavior. Otherwise we will justly be accused of desiring a future in which such tactics are the norm. If we are not willing to be part of the market `invisible hand' that non-coercively punishes Microsoft for its misbehavior, we invite the argument that only coercion will do.
The only principled response to the facts is to condemn both the DOJ and Microsoft. That one party is a villain does not make the other a saint, and even the fact that one side is clearly using coercion does not automatically redeem the other from the charge of having behaved badly.[31]
In the same way that libertarians use tools of economic analysis to conclude that government regulations harm consumers and stifle entrepreneurial innovation, it can be shown that when software developers add features to their software that are designed to lock-in consumers and prevent the emergence of competitive choices in the market have many of the same detrimental impacts on consumers and free market competition. Of course, government actions to interfere in the free market certainly present addition moral concerns for libertarians that are not present in the purely private creation of artificial barriers to competition, like the ones Microsoft often seeks to impose on consumers.
Libertarian economists have long argued that gold and the gold standard are free enterprise money,[32] software licenses that place no restrictions on the licensee, software that makes the source code available to all and open standards that make their documentation available for anyone to see, use and implement constitute free enterprise software. Though it is wrong to have the government restrict people from using any software they choose and we don’t yet have as large of an empirical data set to pull from as we do with the gold standard, it is clear that such software wins out in free market competition.[33]
Such software also ought to be much less controversial than the gold standard even within the libertarian community. While even some libertarians manage to come up with reasons why a free market in money is unworkable,[34] there ought to be no debate that anyone who does not support a free market in computer software is no libertarian at all.
The Intellectual Property Version
It should not be too surprising that there is a much more simple way to demonstrate from a libertarian perspective that Microsoft’s actions were not the free market ____ that some had made them out to be. The basis of the bargaining power that allowed Microsoft to dictate the licensing terms that they used to restrict competition was not derived from the free market, but rather from government granted monopolies on their intellectual property in the forms of patents and copyright.
In the late 90’s as the antitrust lawsuit was still in full swing, some libertarians still held flawed beliefs about the economics surrounding intellectual property. For example, in a 1998 article on Microsoft for the Mises Institute’s Free Market, Françoise Melese wrote that a popular operating system was an example of a scarce resource that could lead to the creation of a natural monopoly.[35]
Over 12 years after the antitrust lawsuit was filed against Microsoft, Stephan Kinsella said in an interview with Jeffrey Tucker, about the issue of intellectual property that:[36]
Finally, everything fell into place, primarily from Rothbard and Misesian theory. I found that this issue is difficult, but once you see it, it's one of these issues that sets peoples' minds on fire. It frees you to think about other things in different ways. It's like five or six other walls also fall in your mind on topics that you already had a view on. Now you can see them in a different light — about economic theory and libertarian theory.
For me one of those other topics was software licensing. 








 Llewellyn H. Rockwell Jr., “Antitrust for Fun and Profit”, The Free Market, Published by the Ludwig von Mises Institute, August 1998, online at http://www.lewrockwell.com/archives/fm/8-98.html
Thomas DiLorenzo, “Rent Seekers' Attack Microsoft”, November 15, 1999, accessed July 9, 2012, online at http://www.lewrockwell.com/orig/dilorenzo1.html 


One such example of a feature that Microsoft started building into Internet Explorer in 1996 was a technology called ActiveX. It is only available on Windows and therefore the more websites that Microsoft could get install features that used ActiveX, the greater the disincentive for a user to switch operating systems. Convincing website owners to use the technology required delivering website visitors that could use the features. That’s where the market share of Internet Explorer becomes so important. When its market share was over 90% in the first several years after the turn of the century, that meant 90% of visitors to a website had native support for ActiveX and the inability of some users to use ActiveX features ceases to be a huge strike against using the technology. Especially when a significant percentage of the people not using Internet Explorer can be dismissed as Linux geeks. In order to keep people using ActiveX in their websites when the percentage of IE users started to fall, Microsoft was stuck with two dead end options, either convince other browsers to support ActiveX or convince website owners to implement features that a significant and growing number of their visitors couldn’t use. The Mozilla Foundation that was responsible for the Firefox browser wasn’t going to support ActiveX and for obvious reasons the second option was doomed to failure.[37][d] Therefore, it shouldn’t come as much surprise that you probably don’t remember that last website to ask you to allow an ActiveX control to function.[e]
________________
On Intellectual Monopolies
3. Everyone Agrees: Monopolies are Bad
The contention that monopolies are bad is widely considered to be so unambiguously decided and obvious, that in most cases it is not even necessary to explain why monopolies are bad, merely arguing that something results in a monopoly is enough reason to be opposed to it. Congress has deemed preventing monopolies to be in such a vested
Historically, the association of patents with government granted monopolies was much more apparent. In fact the first statutory expression of patents in English law by Parliament in 1624 was called the Statute of Monopolies.[38] In many countries, such as England, patents started as royal decrees based not on an invention, but merely on political connections and favors. In fact, in some cases patents didn’t even have to be given for a new invention, but rather
The consensus is so bipartisan that the federal government often makes a big show of using anti-trust laws to break up or attempt to break up a monopoly. For example, when Bill Gates was dragged before the Senate Judiciary in March of 1998 to answer for the allegations from the Justice Department that Microsoft was a monopoly, Senators ranging from Republicans Orrin Hatch of Utah and Mike DeWine of Ohio to Democrats Herb Kohl of Wisconsin and Patrick Leahy of Vermont took the opportunity to speak out against monopolies. The question up for debate was not whether the federal government ought to use its power to break up monopolies, that was already assumed, but whether or not Microsoft was in fact a monopolist.[39]
The opposition to monopoly is so widespread that even critics of anti-trust laws don’t bother to defend monopolies, instead they represent some of the most strident defenders of the free market and levy the criticism that the only true monopolies are ones created by the government in the first place. As Murray Rothbard argues in Man, Economy and State:
Thus, we conclude not only that there is nothing “wrong” with “monopoly price,” but also that the entire concept is meaningless. There is a great deal of “monopoly” in the sense of a single owner of a unique commodity or service (definition 1). But we have seen that this is an inappropriate term and, further, that it has no catallactic significance. A “monopoly” would be of importance only if it led to a monopoly price, and we have seen that there is no such thing as a monopoly price or a competitive price on the market. There is only the “free-market price.”[40]
Instead he, offers an earlier definition of the term monopoly given by the seventeenth-century jurist Lord Coke:
A monopoly is an institution or allowance by the king, by his grant, commission, or otherwise . . . to any person or persons, bodies politic or corporate, for the sole buying, selling, making, working, or using of anything, whereby any person or persons, bodies politic or corporate, are sought to be restrained of any freedom or liberty that they had before, or hindered in their lawful trade.[41]
In his book Free to Choose, Milton Friedman using a much more mainstream definition of monopoly, argued that monopolies were next to impossible to achieve on a worldwide scale and that free trade and removal of government barriers to entry were a more effective solution.[42]
Even those who defend the monopoly privileges that the government gives out to companies like public utilities and Major League Baseball, do so with the justification that monopolies will occur in these sectors of the economy anyways and that a regulated monopoly is better than an unregulated one.[43]
With a bipartisan consensus in Washington DC that monopolies are bad and the only disagreements from a free market perspective coming from economists arguing that the monopolies the government tries to break up were either created by the government themselves or not actually monopolies at all, it is nearly impossible to come up with someone who would argue with a straight fact that monopolies are good.
________________


4. Why Even Pro-IP Free Marketeers Should Agree
There is certainly fierce and even occasionally healthy debate within the libertarian community over intellectual property. Despite these disagreements, there ought to be no debate about the benefits of someone choosing to voluntarily relinquish their monopoly privileges and consequently the arguments I make in this book.
The utilitarian arguments for copyright and patents are not that they are areas of natural monopoly where formation of a monopoly is an inevitable outcome of market competition, but rather the exact opposition. Proponents instead argue that without monopoly, the innovation or creative work, and the resulting market, would not have been created in the first place without the potential for monopoly. They argue that the system of intellectual property is necessary to properly incentivize innovation. Such logic is used everywhere from Article 1 Section 8 of the US Constitution[44]
These arguments go out the window when a creation has already been completed and the creator voluntarily chooses to forgo additional government privileges, which is what happens when software is licensed in a way that leaves other free to build on, modify and adapt the original code. The argument that something will not be created simply can not apply once it has already been created.
Furthermore, there is no good argument that it would somehow be better if creators utilized their intellectual property to extract rents perhaps with the justification that that those funds would allow for further creation and innovation for several reasons. First, there is no guarantee that intellectual property can yield a profit in the first place, even with monopoly protection. Secondly, there is no reason way to guarantee that even with additional money the creator will produce more of something useful or that they will even try, perhaps retirement would be preferred. Finally, the case rests on the assumption that money would fail to be available to the creator through some other means.
Perhaps such a specific scenario does exist, but even still, from a utilitarian perspective, that loss would have to outweigh the gains from all of the forgone exclusion, which, as this book sets out to show, are quite large.
Even if it was the case, there is also no libertarian solution to force a creator to try to use a government granted monopoly to extract higher rents from the market.
The moral or ethical arguments for intellectual property have come from such libertarians as Ayn Rand, Andrew Joseph Galambos[45] and J. Neil Schulman[46].[47] The logic of these arguments is that intellectual property is a legitimate extension of the natural right of private property ownership.
However, granting someone the ethical right to exclude people from the benefits of their work implicitly grants, or ought to grant, them the right to choose not to do so.
Thus, though my argument is heavily steeped in and inspired by anti-IP libertarian theory and arguments, the idea that it is best to choose the software with the least intellectual property restrictions is one that applies to not only anti-IP libertarians, but libertarians of all kinds. In fact, at the root of my arguments are the same ideas that lead people to oppose monopolies.
________________
5. A Crash Course in Libertarian Anti-IP Theory
As I outlined in the Preface, there are two starkly differing frameworks that can lead one to call for the abolition of patents and copyrights. The utilitarian argument that we would all be better off without intellectual property for reasons such as more innovation, greater economic growth and quality of life, more creative works being produce and higher quality and greater variety of creative works being produced an the natural rights or ethical argument that intellectual property is not property at all and thus does not merit grants of monopoly.
The Utilitarian Case
The utilitarian case is inherently an empirical one. It requires a comprehensive look at creation and innovation across a huge number of different industries and the economics that impact those industries. Such a task is far beyond the scope of this book and has already been completed at a level well beyond the capabilities of this author by Michele Boldrin and David K. Levine in their book Against Intellectual Monopoly.
Rather than trying to replicate their work in this book, I will instead take on the much simpler task of persuading those that might disagree that if you have reached the conclusion that patents and copyright are necessary to spur innovation and have not undertaken either the performing of or reading of a comprehensive empirical analysis, you ought to do so before reaching such a conclusion.[48]
For starters, any claim that inventions or creative works would not be produced without grants of monopoly from government are clearly false. Writers were not able to utilize copyright to profit from their works because no form of copyright existed in any country until the London Company of Stationers was given monopoly power to regulate the writing and publishing industry in England in 1557,[49] yet there are books that date back to before that time.[50] Inventors like Gutenberg were not able to patent their inventions at all. It was not until the early 1980's that computer software become eligible for either copyright or patent protection.[51]
Even in the times of complete copyright and patent protection that we currently live in there are examples of inventions and creative works that flourish without intellectual property protection. Artist Nina Paley released her movie Sita Sings the Blues very successfully under a Creative Commons Share Alike License.[52]
The Linux operating system is released under the GNU General Public License which passes up most copyright and patent restrictions and is so successful that it is the dominant operating system of virtually every computer category other than desktop computers. It powers the majority of servers, supercomputers and a growing number of smart phones. The entire fashion industry also operates without any form of intellectual property protection for new design.[53]
There is also no doubt that there are costs to intellectual property.[54] From attorney's, to enforcement costs, to patent trolls, the costs of the patent system in particular are directly connected to the intellectual property system and compared to the alleged benefits, easily observed and quantified. Thus particularly for those who claim that intellectual property is a net benefit from a utilitarian perspective, such a statement must be an empirical question. Costs and benefits require such an analysis to demonstrate which one is greater.
It is also worth noting that while many of the proponents of the utilitarian case against intellectual property are libertarians or libertarian-leaning, there is nothing inherently libertarian about it. By definition, a utilitarian framework does not require inherently libertarian values, though there are certainly exclusively utilitarian libertarians.[55]
The Natural Rights Case
The most comprehensive libertarian case against intellectual property ever written is very likely Stephan Kinsella's Against Intellectual Property. His argument goes back to the foundations of libertarian theory to the reason for the existence of private property rights in the first place. The reason for needing a system of property rights comes from that fact that physical property is scarce and excludable. If land or goods were unlimited and could be used without influencing anyone else's use of the same land or goods, there would be no reason for property rights. Everyone would simply use as much as they wanted in whatever manner they wished without any conflict.
The ideas that are subject to intellectual property restrictions through patents and copyrights are different. Ideas on the other hand are not scarce. While they are not scarce in the sense that everyone has an unlimited supply of worthwhile ideas, they are not scarce in the sense that everyone can use the same idea without stopping the original owner from using it as well. As artist Nina Paley so eloquently rhymes in her video “Copying is Not Theft”, “Copying is not theft. Stealing a thing leaves one less left. Copying it makes one thing more; that’s what copying’s for.”[56]
There is also an argument often repeated by libertarians in the form of a reductio ad absurdum[57] aimed at showing that the idea of intellectual property is inherently incompatible with our notions of physical property. The exact line of argumentation depends on the particular version of intellectual property being argued against, but the idea is basically the same. Any enforcement of intellectual property rights requires restricting the ability of non-consenting individuals to do as they wish with their own property. If you have a patent on a new kind of mousetrap, I am prohibited from taking materials that I own and combining them into certain shapes. Unless I have signed some kind of contract with you as the inventor, this clearly violates my property rights. Similar arguments can be made for my ability to print certain texts with my printer, ink and paper or to perform songs with my own instruments on my own property.
Defenses of intellectual property, such as the one put forth by Ayn Rand,[58]
that do not allow for an independent inventor defense and grant exclusive monopoly privileges to the first to either create a particular invention or to file for a patent on the invention with the patent office. Some libertarians have advanced theories that permit an independent inventor defense. For example novelist J. Neil Schulman's theory of logorights argues that any creation that is not unique enough to allow for independent invention does not merit an exclusive monopoly in the first place.[59]
Libertarian philosopher Roderick T. Long, takes the argument one step further in his argument against intellectual property. He argues that intellectual property necessitates owning other people because of our ability to store copies of ideas in our minds:
It may be objected that the person who originated the information deserves ownership rights over it. But information is not a concrete thing an individual can control; it is a universal, existing in other people's minds and other people's property, and over these the originator has no legitimate sovereignty. You cannot own information without owning other people.
________________
Software Licenses
The Black Duck Software KnowledgeBase of over 570,000 open source programs listed on 5,400 different websites identifies more than 2,200 licenses under which the code can be used.[60] Nearly every closed source, proprietary piece of software has its own license and end user license agreements (EULA) that sometimes go on for dozens of pages. Apple’s iTunes Terms and Conditions are infamous for being over 15,000 words and going so far as to prevent the use of iTunes in the manufacture of nuclear, chemical or biological weapons.[61] The iTunes EULA was even the subject of an episode of the vulgar cartoon South Park in which 4th grader Kyle Broflovski failed to read the EULA and unknowingly agreed to become part of Steve Jobs’ Human “CentiPad”, a parody based on the horror film Human Centipede.[62]
With so many licenses, it is useful to provide some background and discussion of them in order not to have it bog down the comparison of specific software. Separating the discussion of the licenses from the software also helps to paint a much clearer picture of the landscape of software license activism and include a bit of background about the people behind some of the licenses.
Despite so many licenses, there are only so many restrictions that software developers commonly want to impose on users of their software and modification of their code. Thus, it is common to discuss certain groups of similar licenses with similar features. 
Separating out this discussion also allows those readers who are familiar with software licenses and the activism that surrounds them to not have to be bored by reading my explanations. If you are wondering if you qualify as one of those people, the simplest test is your knowledge of relevant 3 letter acronyms. If you know why ESR disagrees with RMS; the differences in the mission statements of the FSF, ASF, and OSI; how the terms of the GPL, LGPL, and MPL differ from those in the ASL, BSD and MIT and which of those apply to which software on your computer; or thought to yourself that the use of BSD and MIT was incorrect in that last sentence because they should have been followed by the word “license”, you can probably safely skip ahead to the next section of chapters.
________________
6. Brief History of Proprietary Software
It was not until 1983 that programmers were granted the same monopoly privileges over their work as literary authors when a US Court of Appeals reversed the decision of a District Court in Apple Computer, Inc. v. Franklin Computer Corp. That court decision expanded upon and clarified the 1980 decision of Congress to include computer programs in the list of copyrightable works. Before these radical changes, the machine readable 1's and 0's that comprise the fundamental basis of all software were simply viewed as another cog in the machine that didn't deserve the same protections as an author's literary writing.
Then Microsoft and Apple were giant assholes to everyone. The end.


________________


7. Richard Stallman, GNU and the Free Software Movement
Coincidentally enough, it was in 1983, the same year that software gained full copyright protection under the law, that Richard Stallman, a programmer working at MIT’s Artificial Intelligence Lab, announced the formation of what he called the GNU Project. GNU is a recursive acronym that stands for GNU’s Not Unix. The G literally stands for the acronym itself.
The goal of the project was to develop a free operating system that would be compatible with the proprietary Unix operating system that was developed by AT&T’s Bell Labs in 1969 to be called the GNU Operating System.
By free Stallman did not mean he wanted software to be given away free of charge, rather as a user of software, he wanted the freedom to use and modify software.
Perhaps the most famous story of Stallman’s desire for freedom as a user and frustration with being denied it is the story of the new Xerox printer that was donated to the MIT AI Lab in 1980.[63] In order to deal with the issue of paper jams that occurred from time to time with their previous printer, Stallman had acquired a copy of the source code for the printer drivers and modified it to automatically alert users with pending print jobs of paper jams, so they could go and fix them. However, the new Xerox printer only came with the binary version of the driver.
Rather than the human readable code that Stallman could modify and improve, it contained only the machine readable 1’s and 0’s that results after code is compiled. That in itself was not a huge deal or unusual. What was unusual is that no one else had the source code either. In what today would be a curious decision, Stallman did not even bother to ask Xerox for the source code. "They had already given us the laser printer, why should I bug them for more?" Stallman was later quoted as saying. He had acquired the source code to the driver for their previous computer from a colleague at Harvard, his alma mater, and figured he could find someone else to get the source code from. That was the attitude regarding software at the time; it was a communal resource to be freely given from one user to another and modified and improved along the way.
When Stallman finally tracked down someone who had the source code in a Carnegie Mellon computer scientist who had just quit a job at Xerox working on the new laser printer. When he finally managed to get to Pittsburgh to ask for a copy of the code, he encountered a obstacle for the first time, the non-disclosure agreement or NDA, the researched had signed with Xerox that prevented him from passing out the source code.
It was that mindset that lead Stallman to leave his job to work full time on the GNU project in 1984 and provided the inspiration for the Free Software Foundation which he founded in 1985 and the idea of free software itself. The term free software in this context should not be confused with software that is distributed free of charge. Stallman and the Free Software Foundation explain the distinction by saying that it is free as in speech, not as in beer.[64]
Karl Fogel explained the problem saying that “If there were a place to submit bug reports on the English language, we could submit one saying that we need an adjectival form of ‘liberty’ that doesn't also mean ‘costs no money.’”[65]
Most importantly, the FSF defines free software in terms of what they call the four essential freedoms.[66] Being programmers, their list starts at zero:
(0) to run the program, 
(1) to study and change the program in source code form, 
(2) to redistribute exact copies, and 
(3) to distribute modified versions.
Only software that gives the user all 4 freedoms qualifies as free software by their definition. Violating any of the requirements even partially is enough to disqualify a license. For example the JSON License includes the requirement that “The Software shall be used for Good, not Evil.” and is therefore not considered a free software license because it places a restriction on freedom 0.[67]
The problems with restrictively licensed software meant that Richard Stallman and those helping on the GNU project were not the only programmers who decided to do something about it. A computer science graduate student at the University of Helsinki in Finland named Linus Torvalds was among them.
He had been using an operating system called MINIX which had a free license, but only for educational and academic use. Wanting a free operating system under a less restrictive license that he could tinker with on his personal computer without the high cost of Sun’s Unix, he set out to develop a kernel that could be combined with other free software such as the Emacs text editor and C compiler written by the GNU team to create an entire operating system.
________________


9. Open Source Software
Not everyone who wrote and supported free software liked the idea of having Richard Stallman and the Free Software Foundation as the leading voice of software that was distributed with source code for anyone to modify. On such person was mentioned in the Preface to this book, Eric S. Raymond. The event that was the catalyst for a series of events that ultimately became the reasons you probably had heard the term "open source" before you even picked up this book, started when Raymond first presented his paper "The Cathedral and the Bazaar"[68] in September of 1997 at the O'Reilly Perl Conference.[69] Just months later, and in part due to the success of Raymond's presentation,[70] Netscape announced on January 22, 1998 that they would be releasing the source code to their popular Netscape Communicator web browser, in what was an unprecedented move for a major software developer at the time.[71]
Shortly afterwards, it was realized that the announcement created a unique window to get the corporate world to listen to what hackers had to say about the optimal software development process. Thus in Palo Alto, California on February 3rd, a strategy session was held out of which the term open source was born.[72]
The reason for the new term was not over any kind of dispute with the free software movement about what acceptable software licenses were and, in fact, the definition of acceptable open source licenses that would ultimately be decided on by the Open Source Initiative that was spawned by many of the same individuals at the aforementioned strategy session is only slightly less restrictive than the definition of free software used by Stallman and the FSF, but rather entirely in the justifications given for the use of such licenses.[73]
________________


10. Permissive and Copyfree Licenses
The term permissive license is a class of free software licenses that are not copyleft. Though it is very close to a definition that is consistent with a minimally restrictive license, many licenses that do place some restrictions on the user are still considered to be permissive licenses because the restrictions are not copyleft in nature. 
Though the term is only recently coined and still has not achieved widespread use, there are some who refer to licenses that place no restrictions on the user other than 
One such license that places some non-copyleft restrictions on the user is the Apache license. Though the restrictions are quite minimal, they preclude the license from being classified as fully copyfree. 
Software is perhaps the only area of creation subject to copyright that sees a significant percentage of creators utilizing the most libertarian licenses possible in our current system. The two licenses that are used by the overwhelming majority of such projects originated on opposite coasts, each at major universities. The MIT License originally written at the Massachusetts Institute of Technology for the X Window System and the BSD License, named for the Berkeley Software Distribution, a Unix-like operating system created at the University of California - Berkeley, each are some of the most common licenses chosen and certainly considered by software developers. Calculating statistics about the popularity of software licenses by project is difficult and trying do so by lines of code or popularity with users is even more difficult yet, but the best estimates available place the percentage of open source or free software projects using such licenses around the 15 to 20% marks.[74]
When I previously referred to the MIT License and BSD License in the singular, it was not entirely accurate. There have been multiple licenses used by MIT and UC-Berkeley over the years that are referred to the name MIT License or BSD License.
The original BSD License is what is now called the 4-clause BSD License. The New, Modified or 3-clause BSD License removed the advertising clause from the original
________________


The Criteria of Choice
11. The Criteria of Choice
In a proper academic case for using software with as few copyright restrictions as possible, the starting point would be some kind of ethical framework in which the evaluate the harms and benefits of various software choices. I am going to intentionally choose not to develop such an ethical framework for several reasons.
The arguments are able to transcend multiple potential ethical frameworks. In similar fashion to the way that opposition to patents and copyrights can be justified in both a completely deontological and a completely utilitarian fashion, as described in Chapter 5, there are multiple ethical frameworks that could be used to discuss the harms from restrictively licensed software. Developing any single one both distracts from the important arguments and unnecessarily risks creating disagreement that is just a further distraction.
There are however some frameworks that can be rejected. The strictly principled approach of never using software with a restrictive license can be rejected for two reasons. First that it is impossible to put into practice, at some point you will end up using proprietary, closed source software whether by choice or because you use an elevator that runs closed source firmware. Secondly, the time of any software license activist is limited and thus most choose to focus their efforts on the most important software.[75]
Such an approach is also not even universally accepted within the free software development community. Some developers believe that free software projects ought to only be completed using free software tools, while others are willing to compromise if no viable alternative exists for producing something like documentation for the code.[76]
Fundamentally, this book is about making choices as a software consumer and thus it is through that lens that a framework for comparing potential software choices will be developed.
Like any other consumer product choice, the two most important considerations when making a decision as to what software to use are whether the functionality of the software meets the desired needs and the price at which they are met. For the purposes of this book, a more detailed analysis of consumer choice is not necessary. Though behavior economics and psychology potentially have much more to tell us about the habits of consumers, such discussions are far beyond the scope of this book.
Dealing with price is rather easy. When it comes to permissively licensed software there are essentially two prices, free and incredibly expensive. If the software already exists, copies are almost certainly given away for free by someone. If it doesn’t, then the only way to acquire it is to pay a programmer to write it. This book is aimed primarily at consumers of software for personal use and thus for our purposes, only software that someone has already written and is distributing for free will be discussed. While many of the arguments apply to business consumers of custom software at every level from website design to the software that is used to monitor a power plant, a detailed discussion of those purchases is well beyond the scope of this analysis. Thus for our purposes, we can treat price can only an advantage to free software.
Consistent with the subjective theory of value that stems from the work of Carl Menger,[77] the analysis contained in this following chapters of this book will assume that every potential software consumer will internalize the benefits of software given away for free over software they must pay for differently. There are some people who need a certain functionality in their software at nearly any price, but even these people if given a choice between software with equivalent functionality can be assumed to choose the cheaper software when presented with multiple options that meet their needs. Likewise, this analysis will assume that there are at least some software consumers who could be persuaded to sacrifice some functionality from their software in exchange for a price discount.
With the issue of price not requiring much analysis, that leaves the needs of the software consumer to be balanced against the larger implications of the intellectual property governing the software in question to be the focus of the bulk of our analysis with the occasional advantage of price factored in. As Richard Stallman and the free software movement have learned time and time again, functionality trumps freedom and price every time in the wider consumer software market and even more so in the commercial market. Whatever the advantages of open source for development, it means little to consumers looking to use the software unless those advantages materialize in a product that better meets their needs.
In cases where there exists software that is licensed with as few restrictions as possible that contains all of the functionality of its more restrictive competition, the discussion will essentially end after making those points. The more restrictively licensed software can only be more expensive than it's permissively licensed competitor and thus wins or ties in functionality, price and license. Thus such software is the logical choice regardless of how one weighs those factors into their choice.
In cases where software with one of the preferred licenses fails to measure up to the competition either in functionality or perhaps does not even exist at all, the analysis becomes much more nuanced. In theses cases, it is assumed that different users have different levels of need for different functionality and a different willingness and ability to trade functionality and ease of use for the benefits of a less restrictive license. Some users absolutely require the missing functionality and simply can't do without it. Other users perhaps lack the computer skills or knowledge to be able to use certain software. Still others may find that the benefits of permissively licensed software are outweighed by addition functionality from more restrictively licensed software.
The analysis contained in the following chapters will take into account as many of these potential frameworks for evaluation as possible when they are applicable in an attempt to allow all readers to make decisions for themselves. The second case where missing functionality is weighed against the benefits of more permissive licensing is by far the more nuanced and is the one that requires the most analysis.
In such a decision, lost functionality and the cost of missing such functionality varies depending on the software in question and only the individual user can really know how much they value that functionality. The costs of using restrictively licenses software are much more abstract and vary depending on the type of software as well. The other issue is that a comparison is not as simple as a libertarian license compared to a more restrictive license because there are so many kinds of such licenses, all with varying kinds of restrictions.  an analysis of them stands to benefit from some type of framework.
________________


12. The Harm from Closed Source
A framework for evaluation that provides a great starting point was recent proposed by open source advocate and libertarian Eric S. Raymond.[78] Raymond's framework is not directly applicable for our purposes for several reasons. First, he does not take into account the technical ability of users, something appropriate for his audience that consists mainly of computer programmers, but not the audience of this book. Secondly, though Raymond does support using permissive licenses rather than copyleft licenses such as the GPL,[79] in this particular essay he is only proposing a framework for evaluating the harms of closed source against open source licensed software. All of our ideal licenses qualify as open source licenses, but some open source licenses use copyright to place restrictions on their users. Therefore our complete framework must go beyond the one proposed by Raymond's.
The different kinds of harm proposed by Raymond are very useful for our purposes because they all are reasons to support the least restrictive license possible instead of a closed source license. Raymond names the six kinds of harm that comes from closed source software - reliability harm, unhackability harm, agency harm, lock-in harm, amnesia harm and positive network effects.
Reliability harm comes from the idea that software bugs thrive on secrecy and thus when source code is released, more of them are found. Of course this is more of an empirical claim than a theoretical one. Most famously, a 2002 paper published by the now defunct Alexis de Tocqueville Institution claimed that "Open source GPL [General Public License] use by government agencies could easily become a national security concern. Government use of software in the public domain is exceptionally risky."[80] However, the claim shows a lack of understanding of how software security risks are exploited. As A. Boulanger explains in the IBM Systems Journal:
Hiding the source code for a system does not provide any additional security. People searching for vulnerabilities do not require source code to discover software defects. For example, a common way to locate a software defect is to send a program unexpected and unusual data and then monitor how the system responds. If the system fails or behaves erratically as a result of the input, this might indicate a ﬂaw in the system that would warrant further investigation.
With the prevalence of sophisticated software monitoring, debugging, and disassembly tools, much of the source code can be derived from the binary version of the executable program. Anyone interested in obtaining the source code would simply have to apply one of many widely available tools to the program. The output from these programs, while not perfect, would deliver sufﬁcient information to make it fairly easy to understand the internal working of the system.[81]
Evidence for the improved reliability of open source software is not just theoretical. There is plenty of empirical evidence to support the claim as well. A series of studies in 2003 by a company called Reasoning using their automated tools for assessing software reliability found that in measures of defects per line of code. To give some idea of the average defect rates, in their most recent 200 projects Reasoning found an average of .57 defects per thousand lines a code with one third of projects having a defect rate under .36 per thousand lines and one third having a rate greater than .71.
In one such study the examined 6 different implementations of the TCP/IP protocol which underlies the Internet.[82] The 5 proprietary version of the code had an average of .55 defects per thousand lines of code, very close to the benchmark average for a wider range of programs subjected to Reasoning analysis. Linux only had .10 defects per thousand lines of code, just 8 defects in over 82 thousand lines of code. The proprietary versions are not examples of brand new untested code either. 4 of the 5 had been in commercial use for over 10 years while the fifth was relatively new at only 3 years old. Of the 8 defects found, the Linux kernel networking mailing list told Reasoning that 1 of the bugs they found was real and that 4 were not errors at all, leaving 3 unconfirmed at the time the report was published. The confirmed bug had also already been found and fixed by Linux developers in the 2.4.20 release.
Another study by Reasoning of the GPL-licensed MySQL database software found similar results.[83] The reasoning analysis found just 21 defects in over 235 thousand lines of code for an error rate of only .09 defects per thousand lines of code. By comparison, the proprietary database software that Reasoning examined had an average of .58 defects per thousand lines of code, once again very close to their benchmark average.
It is also noteworthy that a third Reasoning study of a pre-release version of the Apache web server found a similar number of defects to proprietary software at that stage in the development process. This suggests that the open source development process finds and fixes more bugs faster, rather than starting from better code.[84]
There are also plenty more evidence and studies demonstrating the improved reliability of open source software over comparable proprietary versions that is focused on the metrics that have more meaning to users of the software than defects per line of code. Those discussions will be saved for the following chapters when the particular software is being discussed as a way to have a better gauge for the reliability harm of those specific software choices. For example, studies comparing operating system uptime between specific operating systems will be saved for the chapter on operating systems and comparisons of the number of days for which there is a known unpatched vulnerability in specific web browsers for the the chapter on web browsers.
This harm can be said to vary in response to the variables of the length of the code and the potential damage caused by malfunctions in it. For the purposes of this book, some of the impacts of reliability harm will be integrated into the discussion of the functionality of software. Raymond makes the case that this harm varies as a function of the complexity of the software because more complex software is more likely to contain bugs and with the expected consequences of bugs. For the average user, the greatest potential negative consequences often come from various security threats found on the Internet, such as viruses and spyware. Thus, the extent to which the software exposes the user to the internet shall be a primary factor in determining reliability harm.
However, it does not follow from the idea that open source development is better at finding and fixing bugs in software that all open source projects must have fewer bugs than all closed source proprietary programs nor does it necessarily mean that any of the bugs in the code have a large impact on the user experience. Therefore, reliability comparisons are best done directly between the software in question when possible. 
Furthermore, the benefits of open source development in terms of improving the reliability of software are not entirely dependent upon the software license like many of the other benefits that will be discussed. Though it is not possible to entirely replicate the benefits of open source development with a proprietary license because of the lack of possiblity of anyone to run their own modified versions or fork the software, some of them can certainly be done either by releasing source code to some other developers via a restrictive license[85] or for a sufficiently large company by replicated open source practices internally.
Reliability is also something that is very easy wrapped up in the question of functionality and already  
Unhackability harm is the harm that comes from the inability of the users to modify the software in order to customize it to their specific needs. Considering that most of the people who benefit from this aspect of software licensing are either programmers with the ability to modify the software themselves or commercial software consumers with the money and need to pay programmers to do it for them. For the average software consumer, such harm is likely to only manifest itself in the form of missing features that are included in our already present functionality analysis. To a lesser extend, unhackability harm could materialize in lost potential future functionality. Perhaps features will be developed for open source software that are not commercially viable for a proprietary developer to add to existing software.
Agency harm is a large enough topic that it merits an entire chapter of its own. Raymond defines it as the ability of software developers to use their asymmetric relationship with their users to restrict choices, control their users' data and extract rents. Raymond discusses these harms only in terms of the ability of developers to do these things, but the person or company that is given these powers also plays an incredibly important role. 
For the most knowledgeable computer users, decisions can be made on the basis of whether or not such powers are actually being exercised at the moment. But, how many of any given browser's millions of users would know if support for certain video codecs were dropped or added or if changes were made in what data was being sent to the developers of the browser? How many of those would switch away from using their otherwise favorite browser as a result compared to the number that would just mindlessly update their software to the latest version regardless of the changes the developer has made? If Internet Explorer's fading dominance of the browser market has taught us anything, it's that the answer is far too few. Thus for the average user, the importance of the historical record of the developer is significantly more important.
Raymond describes the root of agency harm as deriving from the ability of closed source developers to be "privileged to see inside [software] and modify it." Though it is not quite clear from his initial description, when he discusses agency harm applied to specific software areas it becomes clear he is only referring to the harm that can come from the specific software program in question and not any less direct implications that come from the relationship between a software developer and a user.
There are also other kinds of indirect harm that are very closely related to what Raymond called agency harm because they too derive from the asymmetric relationship between a software developer and users. For example, even though a software developer produces software that allows users complete freedom, it is possible for them to leverage the power of user base to place restrictions on users or extract rents from them in other ways. This indirect agency harm is especially powerful when it comes to establishing standards in a software market with many players. A second way that software use contributes to agency harm is in providing revenue that a company or individual can spend on whatever other software projects they wish.
To distinguish between the kinds of agency harm that Raymond was talking about and my own kinds, I will refer to Raymond's agency harm as direct agency harm, which will include only harms that come directly from the software in question, and call the kinds of harm I have just described indirect agency harm. To help make the distinction clear, take the example of a basic Google search. Google's data collection and the potential for privacy violations as a result constitute direct agency harm. It comes as a result of the code that users run in their browsers and cause to run on Google's servers. The potential for indirect agency harm occurs because searches generate revenue for Google through ads. This revenue is money that Google can use to fund software development projects of any kind.
A final important distinction between direct and indirect agency harm is that direct agency harm can only ever be negative. Since software is supposed to be beneficial and it can reasonably be assumed the the direct benefits of using software are known by the user, it is only possible for restrictions, data control and extracted rents to be negative. The assumption is that users should face no imposed restrictions or inability to control their data and that any code designed not to allow for such freedom is a harm. In the case of indirect agency harm, it is possible for it to either be a positive or a negative. A software developer could go out of their way to leverage their user base to achieve good by pushing for open standards on the web, they could choose to do nothing with their profits and perhaps just pass them onto shareholders, or they could do harm by exerting their market power to further lock-in and restrict users in new ways.
Lock-in harm is the difficulty of switching away from software. In this case, the important license is not usually that of the software, but of the format in which is stores data. The most obvious example is that of productivity suites. Microsoft Office uses proprietary formats such as .docx, .xlsx and .pptx as default save formats. No other software can properly read data saved in these formats creating a tremendous cost of switching to another set of productivity software. Lock-in harm can first be evaluated on a threshold basis, either the data is locked up in a restricted format or it is not. In the case of locked-in data, the harm is directly proportional to the cost of changing it to a different format.
Amnesia harm is the cost that comes when a proprietary software or format is abandoned and the capabilities and knowledge that it utilized or are stored in it are lost. Such harm increases with the complexity and uniqueness of the software in question or the value of data stored in such a format and the likelihood that the ability to access it will be lost which should be inversely proportional to the number of people with access to the knowledge. Thus the most high risk scenario is one where valuable data is being saved in a complex and unique format developed by a small number of people.
The final type of harm that Raymond mentions is positive network effects. Network effects in the software market will be discussed in detail in a later chapter. On the most basic level, network effects are when the value of a product is increased by the number of users. Social networks like Facebook and Twitter are the obvious examples. Raymond compares the harm from network effects to that of lock-in harm in that they raise the cost of transitioning away. However, the impact of them is much greater than just that. When network effects are present they act as a multiplier on all the other types of harm because irrespective of those kinds of harm in one direction or the other because they encourage people to use software. Calling positive network effects exclusively a harm is also not correct because while they can raise the costs of moving away from software, they can also encourage its adoption. Network effects also have no dependence on the software license in question and only on the number of users, thus my analysis will treat them not as a harm that stems from restrictive software licenses, but rather as a multiplier effect that magnifies either the harms or benefits of a given software choice. It is also possible for network effects to be considered a measure of difficulty in opening restrictive software monopolies when it comes to things like ending proprietary format monopolies.
In addition the harms discussed by Raymond, our analysis requires the additional discussion of the harms from restrictive open source licenses. This comes when a software developer chooses to write their own software rather than using software that already exists because of the license. I will refer to this harm as reinventing the wheel harm because it is essentially the harm caused by programmers choosing or being forced to write new code to do something that someone has already written software to do.
The variables that contribute to reinventing the wheel harm are difficult to quantify because they depend so much on the preferences of the developer in question, which itself is sometimes and unknown. The most simplistic way to treat it would be to treat it as an increasing function of software restrictiveness. But some developers may shy away from using software with certain restrictions, but not others, so such a model is clearly wrong and whether or not it is useful is a purely empirical question. A much better model to deal with with quantifying reinventing the wheel harm is to deal with groups of developers that have similar preferences for software licenses. Such a model will be pursued in the following chapter that makes the case for using the most libertarian license possible.
________________


13. Software Network Effects
The economics of the market for consumer computer software are often distinctive because of a phenomenon called network effects. Network effects are when a good or a service becomes more valuable when it is used by more people. These impacts can be seen in the markets for operating systems, programs that run locally on individual computers such as office suites and web browsers and in formats used to save and display text, audio, pictures and videos.
Network effects are commonly divided up into several categories, all of which apply to one software market or another. In many cases the lines between the categories overlap and apply to the same markets, which are not necessarily so clearly defined either.
Direct network effects are when increases in usage lead to a direct increase in the value of a product. An example of direct network effects is email. The more people that can be contacted via email, the more valuable it is to have email as well.
Indirect network effects are when increases in usage incentivizes the creation of valuable complementary goods. Examples of indirect network effects in computer software include operating systems spawning applications to run on them. This effect can be seen on platforms ranging from desktop operating systems like Windows to mobile ones like iOS and even in the extensions that run in web browsers like Firefox and Chrome.
Perhaps the most powerful network effects are two-sided network effects which happen when increases in usage increase the value of complementary goods used by a different set of users. In computer software this is commonly seen in the interaction between the markets for consumer software purchases and the labor market for programmers. When more people use a platform such as Linux or Playstation 3, programmers are incentivized to create more software to run on those platforms.
The interconnectedness of the software markets and the network effects can be illustrated by focusing on the software ecosystem created by a single user. For example a user could run the complete suite of Microsoft products on their computer. Windows for an operating system, Internet Explorer for a web browser and Office for a productivity suite. All of these
The tendency of operating systems to become a monopoly is evidence by the observation that the only two competitors to Microsoft’s Windows are one made and promoted by Apple, the most valuable company in the history of the world, and Linux a product that is given away for free is deemed to be enough of a better produce to dominate the server and supercomputer markets.
It has network effects in that it is most cost effective for producers and easiest for consumers if there is one standardized format. Having to put out a version of software for more than one operating system just serves to increase production costs for software producers. Not having a version of software for your computing platform of choice is a hassle for consumers. Standardization is imperative for communication technologies that work across multiple platforms, such as the internet. Standardization of web formats allows you to visit the same website whether you view it in a Chromium browser on Linux, Firefox on a Mac or Internet Explorer on Windows.
Breaking the advantages that Windows and proprietary formats gain from natural monopoly and network effects and using them to advance free software is why every user of Linux or free and open source formats is so important. Each additional Linux user gives Adobe a greater incentive to release Linux versions of their Creative Suite software and remove a huge hurdle to Linux adoption. Which in turn provides the incentive for more developers to release Linux versions of their software. Every additional user who has Libre Office and saves their word processor documents in a format like .odt instead of .doc is one step closer to breaking Microsoft Office’s hold as the standard productivity suite.
Thus each addition user creates a snowball effect by altering the economic incentives of developers and other consumers away from fully copyrighted software and towards free software.
________________
14. Agency Harm and the Power of Your Choice
There is a reason that Google spends millions of dollars each year trying to get you to use their free browser or pick a phone powered by their free operating system, that Microsoft gives discounts to students and schools to get kids learning on computers powered by their software, that Apple tightly restricts the software ecosystems of their products, Richard Stallman and the FSF don't want you touching anything powered by non-free software and Facebook so desperately wants you to sign up for and log onto their free website. Users give them power. The power to control the direction of technology, software and the internet.
Microsoft and Apple want to use this power to lock you into their software ecosystems to make it easier for them to sell you more software. Google cares less about what ecosystem you use as long as while you are there you spend maximal amounts of time on the internet performing Google searches. Facebook and Google want information about you so that they can monetize your page views via advertising. Richard Stallman wants you using free software for ideological reasons and so that like a virus bringing about a zombie apocalypse, the GNU General Public License can infect everything.
The entire purpose of this book is to empower you with the knowledge that will turn you from one of their puppets into a full fledged player of your own. Odds are that you will never become a player on the scale that they are, but knowledge can make you a player none the less.
In a certain sense, software is like any other market in that consumers and businesses have needs that they need software to fill. However, software is a quintessential example of a two-sided market. Your decisions as a consumer help shape the supply and demand curves of software developers. You may have no choice about needing a word processor, a PDF reader or a web browser, but that doesn't mean you don't have any choice in the matter. What operating system does your word processor, PDF reader or web browser need to run on? What format should your word processor save in? What video and audio codecs should your browser have HTML5 support for? All of these are specifications that you as a consumer do have control over and collectively software developers can be forced to meet.
Some software markets even consist of multiple interfacing two sided markets. Take for example web browsers, there is the two sided market of the browser developers and browser users, but there is also the two sided market of browser users and the developers of the websites that people visit with those browsers. In order to implement a new standard, technology or feature on the web, all 3 groups have to choose to implement it.
As a software consumer, you also have the ability to grant power to the people who created the software you use because of the assumption that you will keep using their software. While there are certainly brand loyalty effects in other industries, software updates and other interactions with active users give developers a more unique source of power.
The criteria for evaluating direct agency harm are fairly straight forward as developed by Raymond and discussed previously. However, there are several criteria we can use to evaluate indirect agency harm that need further discussion and development.
The first criteria is how a company leverage their intellectual property to restrict competition. Past and existing patent lawsuits provide particularly good objective evidence that a company seeks to use the power of government to gain an advantage over competitors in the market. Joining and contributing patents to pools designed to more easily extract patent rents is another piece of evidence that a company wishes to use their IP to restrict competition.
Choosing to contribute patents to defensive patent pools that allow others to defend themselves against patent lawsuits is evidence that a company doesn't want to use patents to restrict their competition. Choosing to irrevocably license patents to anyone who might want to use them or releasing software under license that fail to take advantage of the ability of copyright to restrict use are other signs of a pro-competition attitude towards intellectual property. Taking other steps to restrict their ability to file patent lawsuits, such as Twitter's Innovator's Patent Agreement which requires the permission of the engineer credited with an innovation before a lawsuit can be filed by the company it is assigned to,[86] also are positive signs about a firms approach to IP.
A second criteria is the licenses that a company uses for the software they write. Whether directly through the purchase of the software or indirectly by enabling the developer to make money in other ways or just to their popularity, the use of software contributes to the ability of the developer to fund the creation of more software. Theoretically, users could just choose to use only the software from a certain developer that was released under less restrictive licenses, but in practice this will never be the case.[87]
The third criteria that can be used is the extent to which a company seeks to use their market power to steer consumers towards the use of formats and standards that they control either due to technological or intellectual property reasons. 
A final criteria that in a way is all encompassing in the degree to which a company uses practices that are the root of other harms mentioned previously, such as lock-in harm.
It is both an enormous task in itself and beyond the scope of this book to conduct an extensive investigation into the practices of the companies in question, but a brief overview here can certainly be useful in giving some idea of which companies we should be putting our market power behind. Using the order of market capitalization at the time of this writing, from largest to smallest, the discussion will start with Apple.
On the issue of intellectual property and patent lawsuits, in recent years Apple has been just about as bad as any technology company in existence. They have filed lawsuits against Samsung, Motorola, and HTC seeking injunctions against the sale of various smart phones and tablets for patent infringement in multiple countries around the world.[88] In particular two of Apple's patents at the heart of the lawsuit merit particular contempt, the absurd patent on the slide to unlock feature of their phones[89] and the design patent that covers nearly any device that looks like a tablet.[90]
When it comes to the licenses they release their software under, many people will be pleasantly surprised to learn that the core technologies behind the OS X and iOS operating systems and the Safari browser are both open source. In 1997 Apple bought a company called NeXT Computer who had developed and operating system called NeXTSTEP that borrowed sections of code from the BSD licensed FreeBSD and NetBSD operating systems. As a result Apple chooses to release some of the source code back to the BSD community through the Darwin project which is licensed under the FSF and OSI approved, copyleft, Apple Public Source License. The rendering engine of the Safari browser is WebKit, an open source LGPL licensed project that derives from KHTML rendering engine that powers the Linux browser Konquerer. Both of these projects will be discussed in more detail in the operating system and browsers chapters of this book that follow.
Of course, the bulk of Apple’s software is released under proprietary licenses and in some cases, like iTunes, with enormous EULA’s to go along with those terms. The best way to summarize Apple’s relationship with open source software is that they use it when they think it provides an advantage to them, but won’t hesitate to take open source code closed or only release heavily restricted proprietary software if they believe it provides an advantage to them.
________________
15. Reinventing the Wheel Harm and Copyleft Virality
The case for releasing software under the least restrictive license possible is easy to make to someone who already opposes copyrights and patents.
As many software creators have found, the advantages of open sourcing a project are tremendous. While there are many software developers who disagree with the idea that it is best to release their code under the least restrictive licenses possible, this book is ultimately not an attempt to persuade them to change their minds.
Perhaps the best model would be to consider all of the different kinds of developers and their licensing preferences. There are some developers that want all of their software to be distributed with a closed source proprietary license. Others will only use strong copyleft GPL licenses. Still others will use only use an open source license, irrespective of whether or not it is copyleft. Still others lack such strong convictions and may have a preference, but are willing to let anyone who pays them to code choose the license. It would be quite helpful to have some idea of the empirical number, code output and importance of the software developed by all these types of programmers. However, such data would be nearly impossible to collect and present in a useful format.
Even without the empirical data required to quantify the model, it can offer some insight. For now, we will deal with 3 groupings of software licenses and developers that prefer them, closed source proprietary licenses, open source copyleft licenses and open source permissive licenses.
We can assume with relative safety that there are a very small number of developers who would refrain from using permissively licensed software when it is available. There are even examples of Microsoft using BSD licensed code and Apple releases their core code back to the BSD community of operating systems via the Darwin project. Perhaps it is worth it to some to reinvent the wheel in order to be able to keep their code a secret, but when equivalent code is already made public and improvements can be kept closed source there is nearly no incentive to do so. 
Free software purists who will only use the GPL for their own code have empirically also been willing to create forks of more permissively licensed software. For example when OpenOffice.org was turned over the Apache Foundation and Apache licensed, free software advocates forked it and created the Document Foundation[91] and the LGPL licensed Libre Office.[92] There are also 2 major examples of permissively licensed software serving core functions within the free software suite of programs, the Apache server and the X11 Window System. The X11 Window System is the basis of almost all Linux desktop graphics user interfaces, such as Gnome and KDE, and therefore is found it nearly every Linux desktop distribution. It was developed by programmers at MIT in the 1980’s and is licensed under the copyfree MIT license.
By definition closed source proprietary software cannot be used in an open source project. There is the possibility that closed source code could be used in some part of a project along with open source software, however while that possibility does serve to mitigate the reinventing the wheel harm, that possibility would also exist for open source software. Thus, the only risk is that proprietary code could not be used and there would be reinventing the wheel harm.
The final possibility is the use of copyleft code to be modified by a developer who wants to create a proprietary or permissively licensed project. However as was explained in a previous chapter, not all copyleft code is the same. As the GNU Project explains in their case to use the GPL rather than the LGPL for certain code, the reason to use strong copyleft is explicitly to force developers who want to use other licenses to entirely duplicate the code.[93] The variations in copyleft lead a number of possibilities. In some cases, developers might want to make changes to code that even a weak copyleft would force them to open source and thus they will entirely reinvent the wheel. In others, using some weak copyleft code, such as a LGPL licensed library, that can be included in proprietary software would be fine. A prominent example of this case is Apple's Safari browser which uses the LGPL licensed Webkit rendering engine.
Though it was probably clear before this chapter even began, permissive licenses do the most to minimize reinventing the wheel harm as permissively licensed code can be used in any project, no matter the licensing requirements. Despite the apparent obviousness of the conclusion that permissive licensed work, the ideological implications of the ideology driving parts of the free software movement and the choice of most projects to use some variant of the GPL make it important to note that the claim is backed up by empirical research as well. A 2009 study of over 8,000 open source projects available on Sourceforge.net found that having restrictive copyleft licenses correlated with less activity in the project and fewer downloads when the target of the project was software developers.[94]
Before the discussion moves on[f], there is another related argument in favor of copyleft licenses that ought to be examined. One argument that advocates of copyleft make is that the licenses force derivativeworks to also release their source code under a free software license, thus increasing the amount and quality of free software. On the other side, some open source advocates have argued that copyleft licenses scare away potential allies who would be willing to use and contribute to open source projects.[95] In both cases, these arguments are reasons why more lines of code would be open sourced and therefore not have to be rewritten. In theory, if copyleft licenses could force enough closed source code to be made open, such licenses could result in a net reduction in reinventing the wheel harm.
In particular, the GNU Project justifies the more viral strong copyleft with the claim that if free software is good enough, some developers will choose to use the software and allow their code to be copylefted as well rather than do without the original copylefted software, thus increasing the pool of free software over what it would have been otherwise. Despite numerous successes in either getting companies to open source software under the GPL or in suing them for GPL violations, it is still unclear how well the strategy has worked.
Some GPL violations, such as a 2009 suit brought against Skype by gpl-violations.org in Germany, having nothing to do with whether or not code is made open source or released under the GPL, but rather with regards to other requirements of the GPL. In the Skype case, their failure was to include a copy of the GPL v.2 itself with a VOIP phone that was being sold.[96]
In others, code that may have been inadvertently mixed with GPL code forced the author to release the code. The problem with distinguishing such a case from one where the code was released under the GPL intentionally is that it is not often that a developer is going to admit they made a mistake and are only being forced to release code because employees didn't realize the full implications of building on GPL software.
Such is the case with Microsoft's 2009 release of three Linux drivers that improved performance when Linux is virtualized on Windows Server 2008 Hyper-V. Microsoft's press release heralded the move as goodwill to the open source community.[97] News reports of the incident reveal that Microsoft's mixing of GPL code and proprietary binary blobs was discovered by Vyatta software engineer Stephen Hemminger and only then did Microsoft open source the code in order to bring themselves in compliance with the GPL.[98]
Of course, Microsoft employee Sam Ramji wrote a blog post responding to the allegations that Microsoft's hand was forced by a GPL violation, claiming that "Microsoft chose the GPLv2 license for the mutual benefit of our customers, partners, the community, and Microsoft. Microsoft's decision was not based on any perceived obligations tied to the GPLv2 license."[99] That may have been true, but there is also no doubt that they were caught in a violation of the GPL and would have been forced to release the code if it went to court.
The evidence indicates that it is true that copyleft licenses like the GPL do force the releasing of source code that would not otherwise have been made available in some case. However, without an extensive empirical study that is beyond the scope of this book, the exact extent and effectiveness of the strategy remain uncertain.
On the other side, the argument that copyleft licenses scare away potential allies of open source is even more difficult to quantify in any meaningful way. It would be nearly impossible to come up with any kind of meaningful measure of the number of open source projects that developers and companies preferring proprietary code refused to participate in because of fears about copyleft licenses.




http://linux-network-plumber.blogspot.com/2009/07/congratulations-microsoft.html
http://en.wikipedia.org/wiki/Linksys_WRT54G#cite_note-GPLInfringement-7 http://www.linuxfordevices.com/c/a/News/Cisco-sued-for-Linksys-GPL-violation/http://www.tikirobot.net/wp/2008/11/22/why-gcc-has-a-free-objective-c-frontend/ http://clisp.cvs.sourceforge.net/viewvc/clisp/clisp/doc/Why-CLISP-is-under-GPL
________________


16. Copyleft and the problems with the GNU GPL
The license at the core of the efforts of the Free Software Foundation (FSF) is called the GNU General Public License,[100] sometimes shortened to GNU GPL or just the GPL. The license is based around a principle commonly referred to as copyleft. The term is a play on the word copyright and as the name suggests, uses copyright laws for the exact opposite purpose of conventional use.Rather than using copyright law to stop people from sharing software with others, copyleft licenses are designed to compel people to share their code.
As Free Software Foundation founder Richard Stallman explains:
My work on free software is motivated by an idealistic goal: spreading freedom and cooperation. I want to encourage free software to spread, replacing proprietary software that forbids cooperation, and thus make our society better. That's the basic reason why the GNU General Public License is written the way it is—as a copyleft. All code added to a GPL-covered program must be free software, even if it is put in a separate file. I make my code available for use in free software, and not for use in proprietary software, in order to encourage other people who write software to make it free as well. I figure that since proprietary software developers use copyright to stop us from sharing, we cooperators can use copyright to give other cooperators an advantage of their own: they can use our code.[101]
That explanation cuts rather quickly to the heart of the problem with copyleft licenses from a libertarian and free market perspective. Stallman is using copyright to actively try to stop people from using his code in ways of which he does not approve. When stated in that general sense, it is easy to see why from the perspective of a libertarian, ethically copyleft is not much different than copyright.
Not all copyleft licenses are of the same strength. The GNU GPL is what is often referred to as strong copyleft to distinguish it from the so-called weak copyleft restrictions of licenses such as the GNU Lesser General Public License, or LGPL, the Mozilla Public License. As the Mozilla Foundation explains:[102]
The MPL fills a useful space in the spectrum of free and open source software licenses, sitting between the Apache license, which does not require modifications to be shared, and the GNU family of licenses, which requires modifications to be shared under a much broader set of circumstances than the MPL.
One might object to my previous comparison of copyleft license to fully proprietary licenses on the grounds that in a world without copyright, copyleft licenses would functionally be equivalent since there would be no way to restrict access to a derivative work because there would be no legal copyright mechanism by which to do so. Logically this argument does not differential copyleft licenses as any better because it applies to any license. If I were to reserve all rights to this book via copyright, in a world without copyright, such a license would behave exactly the same as if the work were in the public domain, it wouldn't be applicable.
Obviously, functionally copyleft licenses and fully proprietary software licenses are not the same. Copyleft licenses grant users nearly all the freedoms that the lack of copyright in the first place would grant them. However, from that same functional perspective, it is clear that copyleft is more restrictive than a non-copyleft free software license. There are plenty of possible examples of ways in which a copyleft license would prevent the creation of derivative works.
Before discussing any such examples of where copyleft licenses have prevented wider distribution of software or forced someone to reinvent the proverbial wheel rather than using existing copyleft code, it is important to mention the distinctions between the GPL family of copyleft licenses and copyleft licenses applied to various kind of writing, music of video, such as the Creative Commons Attribution Share Alike License (CC-BY-SA).
The difference lies in the nature of software and how it is created. Unlike a book where the words that you need to have a copy of in order to read the book constitute the entirety of what is required to create a new copy, the version of software that you need to install it and run it on your computer is not the same version as is required to modify it. As I discussed earlier in the chapter on Richard Stallman and the free software movement, the binary version of software will allow you to run it, but only the source code provides the human readable version that can be modified and improved.
In the interest of forcing programmers to disclose their source code, GPL licenses contain very strong language about requiring the release of source code. The exact language changes from version 2 of the GPL to version 3, but basically it requires anyone who distributes GPL licensed software to either give everyone who receives a copy of the machine readable code a copy of the source code as well or along with a written offer to make the source code available at only the cost of physical distribution for no less than three years. The requirement to distribute source code is so strong and specific that according to the FSF's GPL quiz,[103] distributing a binary executable on a CD that has a website printed on it where the source code is available for free download violates the provisions of the GPL.
Microsoft goes so far as to actually ban any software with a license that requires the distribution of source code. Though it exempts several popular copyleft licenses from being excluded such as the MPL and the Eclipse Public Lisense, it explicitly bars GPL version 3 and any of the related modified versions.[104] The exact business reasons for such a decision are unknown, but
However, interestingly enough, it is not just Microsoft that prevents GPL licensed software from appearing in the Windows Phone Marketplace. Version 3 of the GPL also prohibits distributing GPL licensed software with any digital rights management.
Apple too potentially has issues with its App Store policies preventing GPL licensed software[105]
________________
________________


17. Permissive Software as an Open Monopoly Trojan Horse
Imagine for a moment, the following situation. A software developer is undertaking a new project and has a policy, at least for this project, that all of their code must be closed source and proprietary. In the field of competitive software, there exists an open source program. For our concerns, the competitive proprietary products are irrelevant. Lets consider how the situation might play out different if the open source program is copyleft licenses, for example under the GPL, compared to how it would play out if the open source program is permissively licensed, for example under the BSD license.
Under the copyleft scenario, the developer is forced to weight their desire to keep all of their original code and modifications closed source and proprietary against the advantages of starting to build their program from an already existing one. However, there is a good chance that such a decision really isn’t a decision at all. If the developer makes their money based upon a business model that is dependent upon selling closed source, proprietary software, choosing to develop a copyleft program would force them to fundamentally change their business model, which because it wasn’t the decision in question, leaves them with no real decision at all. There are certainly examples of companies who do decide to change their business model to an open source one to develop copyleft software, but even in some of those cases building from existing copyleft programs isn’t an option because they require full ownership of the copyright to the software in order to sell proprietary licenses to the copyleft software the create.
Even in cases where developers do choose to use copyleft software as a starting point, that doesn’t necessarily guarantee that all of their additional code will be made open source. That’s exactly what happened when Apple built their Safari web browser on the WebKit rendering engine and happens when any LGPL licensed library is used in proprietary softare. Of course improvements and modifications to the copyleft code itself are required to have their source code shared.
Going back to the permissive license scenario discussed previously, the options that were available to the developer under the copyleft scenario are still available. They still could choose to not use the open source code as a starting point or they could choose to make all or part of their code open source. The difference of course being that making the code open source would be a purely voluntary choice on their part rather than a legal requirement. The permissive license also gives them an additional option, to keep modifications to the open source code closed and only release them as proprietary binaries.
The scenario will also operate on the assumption that there is at least some probably of the developer choosing to keep modifications to the open source code closed and that the availability of permissively licensed means that the odds of the developer choosing either to not use the open source software at all and the odds that some of the code will be made open are not only lower in the aggregate, but the probability of each decision individually is also lower.
Free software advocates have conventionally thought of the prospects of a developer taking open source code closed as at best no better than the developer having used entirely proprietary software that they either bought or wrote themselves and at worst a harm to free software as a whole because it subsidized the development of non-free software and allowed proprietary developers to create a better product with less time, effort and expense. Such an attitude views the race between free software and non-free software as one where copyleft code is an advantage for free software, any closed source code that only proprietary developers have access to is an advantage for close source software and permissively licensed code is neutral because it can be used equally by both.
The Free Software Foundation provides the perfect example of this attitude when in an essay trying to convince programmers to use strong copyleft GPL for their next library rather than the weak copyleft LGPL when they wrote:
Using the ordinary GPL is not advantageous for every library. There are reasons that can make it better to use the Lesser GPL in certain cases. The most common case is when a free library's features are readily available for proprietary software through other alternative libraries. In that case, the library cannot give free software any particular advantage, so it is better to use the Lesser GPL for that library.
This is why we used the Lesser GPL for the GNU C library. After all, there are plenty of other C libraries; using the GPL for ours would have driven proprietary software developers to use another—no problem for them, only for us.
However, when a library provides a significant unique capability, like GNU Readline, that's a horse of a different color. The Readline library implements input editing and history for interactive programs, and that's a facility not generally available elsewhere. Releasing it under the GPL and limiting its use to free programs gives our community a real boost. At least one application program is free software today specifically because that was necessary for using Readline.[106]
However, such a view is an approach that is limited by both a short time horizon and an overly simplistic horse race metric of evaluation. 
The open source code serves as a Trojan Horse of sorts in the battle between closed and open source software. Inside are not enough soldiers to win the battle by themselves, but there are certainly enough to open the gates and allow the battle to take place without giving proprietary software any walls to hide behind. For those that believe the open source development process is superior to a closed one, it is the walls that are to be feared, not the battle itself.
In the scenario of a developer potentially building on permissively licensed software that the discussion has become momentarily distracted from, there are several important decisions that have already been made for the developer by virtue of choosing to build upon an existing piece of software. The programming language, libraries and other dependencies, and development tools will have already been chosen by the creator of the open source base. While code can be rewritten to add new closed dependencies of various kinds, but since doing so takes more work, the odds are certainly lower than if the code had been closed from the start. For example, software that uses the multi-platform OpenGL to produce graphics could be rewritten to use Microsoft’s Windows only DirectX, but software is certainly more likely to end up using OpenGL if it is based upon code that is already using OpenGL.
In cases where there exist multiple competing formats or standards, software built on an open source program will already have full support for the open format or standard. For example, a productivity suite based upon Apache Open Office will already have full support for OpenDocument Formats. In contrast, Microsoft’s implementations of the formats in the 2007 version of Office had many problems and did not include full support of multiple features.[107] In theory, a developer could strip out support for open formats. However, we can only imagine the PR nightmare that would befall a company who made such a decision.[108]
Even when there are closed source changes that are made to previously open software, if it results in the final product being closed to open source software, the result can potentially have enormous implications for the open source community. For example, had Apple chosen to base OS X on Linux rather than NeXTSTEP,[109] even if all the changes were kept closed,[110] increased similarity could make it substantially easier for developers looking to port their OS X software over to Linux. For example, every additional similarity between the two operating systems could only help make it easier for Valve to create a Linux version of Steam.[111]
The advantage provided by 
________________
The Software Choices
16. Operating Systems
Operating systems are software that manages computer hardware and functions in between that hardware and the applications that run on the computer. Examples include Microsoft's Windows and Apple's OS X.
Though the line can occasionally be blurry in modern complex devices, for our discussion operating systems shall be considered distinct from firmware. Firmware is the read only software stored in the memory of a device that is used to enable basic functions. Examples include the software that allows your TV remote and microwave to work. Desktop computers also have firmware that boots into the operating system when a computer is turned on. Firmware is different than a full fledged operating system in that it is usually stored in read only memory, cannot run applications and is usually never updated during the lifetime of the device.
Before the discussion turns to specific operating systems and the intellectual property controlling their use and distribution, it is important to discuss the potential harms from various levels of restrictive operating system licensing. Developed in the previous section, there are 7 types of harm to be discussed - reliability, unhackability, lock-in, amnesia, agency, network effects and copyleft.
Eric S. Raymond argues in laying out his framework for reliability harm that operating systems score moderate to high on the reliability harm scale depending on the mix of applications in use and the opportunity cost of OS failures.[112] I shall largely defer to his expertise and knowledge of operating systems, but want to elaborate on his contention about the dependence of this operating system harm on the application being used.
However, the less technically skilled computer user that this book is aimed at compared to Raymond's audience of largely programmers will be likely to find the reliability harm escalated by their inability to fix even basic problems and even more dependent upon the harm of the application they are using because they are far more likely to use only applications compared to core operating system functions. In the case of fixing problems, less skilled users will find even basic bugs potentially crippling. Advanced users are much more likely to know how to fix problems, find work arounds and even just to attempt to solve the problem in the first place. This renders a far wider range of bugs fatal to their computer use for basic to average users. Less advanced users are also more likely to use computers entirely for a set of basic applications such as an internet browser, music player and word processor. This makes operating system issues that don't affect those applications less harmful and those that do even more. Thus the harm is more dependent upon the applications being used in conjunction with the operating system.
Raymond rates the unhackability harm high as well arguing that even if the user is not a programming the lack of ability to alter the code on your own is important "because closed source means you get fixes and updates and new features not when you can invest in them them but only when the vendor thinks it’s time."[113] However, this explanation applies nearly exclusively to a business consumer of software. A typical consumer using an operating system at home either won't have the resources or won't be willing to invest them to hire someone to fix a bug or add a feature to their operating system. Even with the assumption that open source development is better at fixing such things, such a consumer is still at the mercy of the software developer to fix the bugs or add features. Open source licenses do add the option for someone to fork the code and add in bug fixes or new features that does not exist for closed source or restrictively licensed software, but that process takes time for someone to get tired enough of waiting to do and even more time to knowledge of the alternative software to reach the consumer.
Therefore, for the average consumer of software for personal use, unhackability harm of an operating system is more likely to be low to medium, with the different coming at the advantages of open source development for pushing out bug fixes and new features faster than closed source proprietary development.
Raymond makes the argument that operating systems are very high on agency harm because of the software the comes bundled with them. He cites the so-called "crapware" that comes bundled with most Windows systems, but that may be the least effective way that operating system developers exert control over users via the software that is installed by default on their operating systems. There is a compelling case to make that the useful software is even more important.
A useful case study to this effect are the default web browsers that come bundled with operating systems. Though the dynamics of the browser market are complex and the main thrust of the analysis will be saved for the chapter in this book devoted entirely to browsers, there is little doubt that the default browsers of Microsoft's Windows, Internet Explorer, and Apple's OS X, Safari, would not be as successful as they are without the advantage of being the default browser of their respective operating systems. Browser usage statistics are difficult to determine and different metrics will inevitably have different usage shares for each browser.


Turning our attention to the choices in operating systems themselves, if the modern desktop operating systems were to be looked at from an evolutionary perspective similar to the way that living things are classified, the first distinction would be between Unix-like operating systems and Microsoft operating systems, all recent versions of which have been called Windows.
Consistent with the criteria laid out previously in this book, for operating systems the assumption that everyone needs to use a computer with basic capabilities such as web browsing, word processing and the occasional game that they can operate without needing a computer science degree will be used to narrow down the list of operating systems that must be discussed. Since the decision to go with a Windows operating system usually occurs when a new computer is purchased, only Windows 7 and 8, with what information is available about it, will be considered from the Microsoft family of operating systems. While it will not be discussed, much of will be said about Windows 7 and 8 also apply to the various editions of Windows Server that are available.
The history of Unix-like operating systems began with the development of the original UNIX by AT&T at Bell Labs in 1969. There are too many different variations of Unix compliant and Unix-like operating systems to discuss all of them even in passing and the history of Unix is extensive enough in itself to merit entire books on the subject,[114] so we shall limit the discussion to the two major branches that have relevance in the consumer market today, Linux and the Berkeley Software Distribution family of operating systems.
Richard Stallman and those helping on the GNU project were not the only programmers who were frustrated with the lack of a free operating system and decided to do something about it. A computer science graduate student at the University of Helsinki in Finland named Linus Torvalds was among them.
He had been using a Unix-like operating system called MINIX which had a free license, but only for educational and academic use. Wanting a free operating system under a less restrictive license that he could tinker with on his personal computer without the high cost of Sun’s Unix, he set out to develop a kernel that could be combined with other free software such as the Emacs text editor and C compiler written by the GNU team to create an entire operating system. Keeping with the spirit of giving Unix-like operating systems names that ending in "nix" he called his kernel Linux.
Though technically only the kernel is called Linux, the name is often used for the entire operating system. Richard Stallman argues that the appropriate name for the operating system as a whole is GNU/Linux, citing the superior technical accuracy and political implications of the inclusion of GNU in the name.[115] The nature of the Linux kernel and the GNU/Linux operating system means that it is possible to both create an operating system that uses only the Linux kernel, the notable example being Google's Android operating system, and to create a version of the GNU/Linux operating system that doesn't actually use the Linux kernel, which makes it not a version of GNU/Linux. The popular GNU/Linux distribution Debian has created an operating system that uses the GNU userland combined with the FreeBSD kernel to create a distribution that it calls Debian GNU/kFreeBSD.[116]
In hopes that the preceding paragraph will suffice to save me from the bulk of the wrath of the free software purists who refuse to call the entire operating system just Linux, the rest of this book will use Linux to refer to the entire GNU/Linux operating system as is commonly done so even in communities of Linux users and will specify the Linux kernel when referencing only the Linux kernel. 
As the name suggests, the Berkeley Software Distribution, BSD, family of operating systems originated at the University of California - Berkeley in the late 1970's.[g] BSD operating systems are important to our discussion for 2 important reasons.
First, one BSD operating system, FreeBSD, is the most popular operating system that is licensed mostly under a license consistent with libertarian anti-IP principle, the BSD license. The April 2012 traffic analysis of all of the website in the Wikimedia family, the most notable of which is Wikipedia, shows that computers running FreeBSD were responsible for about 9.2 million requests. Though that number represents a paltry 0.01% of the total requests received, it is a factor of about 10 more popular than the second most used permissively licensed operating system, OpenBSD.[117] However, with perhaps some extremely minor exceptions, everything that I will say about the benefits of FreeBSD is applicable to any of the other operating systems in the BSD family with BSD licenses.[118]
The second and perhaps more important reason that BSD operating systems require inclusion in our discussion is that Apple's OS X operating system heavily borrows code from FreeBSD. In fact, Apple contributes some of their code back to the open source community through the Darwin project which releases the code that forms of the core of OS X and iOS.
Turning to the decision of which operating system and putting functionality aside for the moment, there is no question that the operating system most consistent with libertarian principles is FreeBSD. Though it does use some code that is GPL licensed, an effort is made to have as much of the code as possible use a copyfree license.[119] The direct impact of the license can be seen in Apple’s use of FreeBSD code by way of the NeXTSTEP operating system that formed the basis of OS X. FreeBSD is not an obscure operating system with no relevance either. When Netflix decided to build their own content delivery network to replace the general purpose commercial ones they had been using previously,[120] they selected FreeBSD as the operating system to run on their servers.[121]
 Functionality on the FreeBSD desktop is a whole different story. Of the 4 operating systems it will require the most technical knowledge and will have the fewest applications. The first problem that it is all but impossible to buy a personal desktop computer with FreeBSD already installed.[122] It is almost certainly easier to find someone willing to sell you a new computer with no operating system on it. That means the only choice for someone who wants to run FreeBSD on their personal computer is to install it themselves.
Of all the purely software related tasks that could be done on a computer, the process of installing a new operating system or partitioning a hard drive to install a second or third operating system is not particularly difficult. However, in terms of the damage that can be done to the potential to take a perfectly functioning computer and render it temporarily useless, the risk could not be higher. The series of tasks required, creating bootable media, booting the computer from an operating system on a place other than the hard drive, and partitioning the computer’s hard drive are also entirely specific to using or installing different operating systems on a computer. Thus, doing so it not something I recommend anyone do for the first time without ensuring that you have nothing on your hard drive that you would miss if it all were erased, aren’t going to be needing your computer for anything in the near future and have a friend nearby who can ensure you at least have a workable operating system on your computer in the event something goes wrong.
However, for someone who is familiar with the process of installing operating systems, FreeBSD is relatively easy to install if a version of PC-BSD, a preconfigured distribution based on FreeBSD that comes with a graphical installer, is used. It can also be tested in a virtual machine or from a live CD, DVD or USB drive. Though the installation process is perhaps not quite as polished and the graphical installer not quite as nice as some of the Linux distributions I have installed, the experience is quite similar.
The 
Without considering functionality, Linux is the next best operating system up for consideration. The major difference in terms of support over FreeBSD is that Linux has enough users to cause a number of application developers explicitly help users install their software on Linux systems. Browsers like Chrome, Firefox and Opera are all made easy to install on Linux by their developers.
However, not all commonly used applications come in Linux variants. Three of the most popular that do not are Microsoft Office, Apple’s iTunes and the Adobe Creative Suite, which inclues Photoshop. Of course there are FOSS alternatives to all 3. Microsoft Office and the open source competition will be discussed in detail in a coming chapter. There are numerous alternatives for playing music in native Linux applications such as Banshee and ____ that adequately fill the role of playing your library of music. 




Starting with , there are really only 3 operating systems that are viable options, Windows, Mac OS X and Linux (well really GNU/Linux). With either Windows or OS X, using them merely consists of paying for the ability to use the software on one computer for your own personal use and not much more. They both leverage the full weight of copyright law to prevent you from doing basically anything beyond the bare minimum. It’s essentially the all rights reserved of the software world.
Developing a new operating system entails an incredible fixed cost. The development of a modern Linux distribution from scratch was estimated in 2008 to be an almost $11 billion project at the prevailing software development costs.[123]
In contrast, Linux is licensed under the GNU General Public License is designed around preserving the four essential freedoms for software user.
In order to enable any user to do these things clearly this license is much less restrictive than the licenses under which you are permitted to run Microsoft or Apple software. The GNU GPL is not however a libertarian license and from a libertarian perspective is more restrictive than the software equivalent of the CC-BY license recommended by Kinsella for written work in two important ways through the power of copyright law.
First, that under certain it requires the release of the source code for software if an executable version is released which is a requirement of all free software. Secondly, that it is a copyleft license, which means that it requires programs that modify the code to also license those programs under the GNU GPL and is therefore less libertarian. In order to qualify as free software according to the Free Software Foundation, copyleft licenses are not necessary, but are encouraged.
There are examples of non-copyleft free software licenses that are more libertarian than the GNU GPL, such as the BSD license, and there are operating systems that largely use such licenses, I believe the most popular is FreeBSD. However, the community of Linux users is much more widespread and as a result the online support and information is much better. Plus, Canonical has spent millions of dollars working on a Linux distribution, Ubuntu, targeted specifically at non-technical users and from all accounts the next release, 12.04 due out next month, includes a much better version of the new Unity interface aimed at those users. 


________________


17. Browsers and Web Standards
In the browser wars, there are basically 5 browsers that dominate the desktop market, Microsoft’s Internet Explorer, Google’s Chrome, Mozilla’s Firefox, Apple’s Safari, and Opera. Consistent with my previous assumptions about the computer abilities and the demands of average users, I’m not going to discuss the only fully copyfree browser, w3m, because it simply is not practical for the average computer user. There are some other browsers that have significant amounts of copyfree code in them, but most users want features, such as extensions, that are only available in the big name browsers or won’t be persuaded to install a browser of which they have never heard.
One of the aspects that makes the choice of a browser from a libertarian copyright perspective so interesting is that the amount of copyright control exerted by the authors of different browsers varies even more greatly than between desktop operating systems. I
Grouped into several categories and presented more or less in order from least libertarian to most, here is my analysis of the copyright status of the major browsers.
Microsoft Internet Explorer – Internet Explorer is a fully proprietary browser. Licenses don’t get much less libertarian than this as it takes full advantage of every bit of copyright protection afforded to it by the law. Unfortunately, the story doesn’t end there. Microsoft refuses to have IE natively support open formats that don’t require licensing patents like WebM and the Ogg formats in an attempt to ensure that proprietary formats like H.264 become the standard on the web.
Opera – Created by the Norwegian company Opera Software ASA, the Opera browser is the 5th most popular browser worldwide but is the most popular browser in some Eastern European countries. Like IE it is a fully proprietary browser taking full advantage of copyright protection.
It should noted that while Opera fully endorses copyright, they are opposed to software patents. Considering that they are going head to head with Microsoft, Apple and Google in the browser market, their patent position is likely driven more by trying to avoid being the subject of a patent lawsuit than anything else. It is also important to note that Opera natively supports the open HTML5 formats Ogg Vorbis and Theora along with WebM, while choosing not to support the proprietary AAC or MP3 audio formats or the proprietary MPEG-4 or H.264 video formats.
Apple Safari – Though Apple based their browser on the LGPL licensed WebKit rendering engine that they forked from KHTML, they have kept every bit of code that they were not forced to open source under the provisions of the LGPL license as proprietary code. This example is an interesting case study because it illustrates what can happen in in the world of interaction between free and proprietary software.
For those who believe that copyleft licenses are no better than copyright ones, Safari is no better than IE or Opera in terms of its license. If you believe as I do, that copyleft is at least a marginal improvement over fully proprietary software, then Safari represents some improvement, but not much. However, Safari represents a clear step in the wrong direction when it comes to HTML5 format support. In the exact opposite manner of Opera, Safari only supports the proprietary formats and provides no support for any of the open formats.
Google Chrome – Chrome is Google’s proprietary browser built on top the Chromium project. It adds in several proprietary features such as an automatic updating feature, a built in PDF reader and an option to send error data to Google.
If your goal is to use the software under the least restrictive license possible, then Chromium represents a substantial improvement over Chrome. However, from the perspective of a libertarian activist who has a goal of picking software with the intent to promote the development and use of software that isn’t restricted by copyright, I am not so sure that it matters because Google is writing and releasing all of the important code under a copyfree BSD license.
Chrome is also the only browser to straddle the HTML5 format wars between proprietary and open formats in choosing to support all of the previously mentioned formats except for the MPEG-4 video format which is only supported by Safari.
Mozilla Firefox – Most of the code in Firefox is tri-licensed under the Mozilla Public License (MPL), the GNU GPL and the GNU LGPL. The Free Software Foundation criticizes the MPL for being too weak in its copyleft restrictions, but from a libertarian perspective, this is a good thing.
Plenty has already been written on copyleft from a libertarian perspective and all of it applies to the licenses of Firefox. See for example Chad Perrin here and Stephan Kinsella here and here.
Firefox takes the same HTML5 format support strategy as Opera and chooses to only support the open formats and none of the proprietary ones.
[Edit 4/16/2012] It appears that Mozilla has caved on H.264 video support and will be introducing it to future versions of Firefox. See here and here. [/Edit]
Google Chromium – Notice that this is ChromIUM and not ChromE. Chromium is the FOSS project that provides the code that powers Google’s Chrome browser and is in itself a fully functioning browser. A little note on the side of the Chromium project homepage tells us nearly all we need to know:
Except as otherwise noted, the content of this page is licensed under a Creative Commons Attribution 2.5 license, and examples are licensed under the BSD License.
It doesn’t get much more libertarian than CC-BY and the BSD License. What prevents this browser from receiving the full libertarian stamp of approval is that the BSD License only applies to new code contributed to the project by Google. Chromium uses code from WebKit that is licensed under the GNU LGPL which does not qualify as a libertarian license as well as some code that is licensed under other copyleft licenses.
In terms of the most libertarian browser, there is no debate that it is Chromium. Unless you are running a distribution of Linux that has a regularly updated Chromium build already in its software repositories (the existence of which is in my mind one of the huge advantages of running Linux), there is really no good way to install and even more importantly update Chromium. As a result for people running either Windows or OS X, Chromium fails the average user test who does not want to have to constantly manually look up and update their browser from the depths of the Google Chromium build repositories. The automatic updater and ease of installation make all the difference. For those reasons, it is not software I would install on my parents computer for them to use and therefore, for some users I think
Picking from the other 5 browsers that are options for the average user on a Windows or Apple computer, it is rather clear that Internet Explorer finishes dead last being entirely proprietary and supporting no open formats. Comparing Safari and Opera is basically the LGPL licensing of Safari’s WebKit against the support for open formats from Opera. Considering the importance of open formats for HTML5 media players and that choosing to use free software rather than write your own as part of a piece of proprietary software isn’t all that meritorious, Opera comes out ahead of Safari.
That leaves Chrome and Firefox as the candidates for the next most libertarian browser.
On one hand, Chrome is more restricted because the entire browser, minus the WebKit rendering engine and a few other bits of software, is fully proprietary code. However, on the other, the creator of Chrome, Google, is releasing that same code under a fully libertarian BSD license through Chromium. While, it’s true that this special arrangement could theoretically end at any time, I don’t believe that the theory of how this kind of relationship should be thought of from a libertarian perspective is anywhere near fully developed enough to really know how to evaluate this relationship and the implications that someone’s browser choice has on it.
In contrast, every bit of the code in Firefox is copylefted. The Mozilla Foundation shares roughly the same vision for software copyright as the Free Software Foundation. They utilize less copyright protection for their software, but produce no copyfree code at all. Thus, rating Firefox on a libertarian scale depends largely on where copyleft software falls on the spectrum between code that isn’t copyrighted at all and fully proprietary software.
It is not entirely clear which one does more to oppose copyright from a libertarian perspective. There are many complex relationships between browsers and other technologies. For example currently there is a huge battle over HTML5 audio and video format support. Mozilla refuses to enable native support for playing mp3′s in Firefox through HTML5 and only supports the open, BSD licensed Ogg format. Due to the network effects that I discuss in a prior post, whether proprietary or non-IP restricted formats become the web standard has enormous implications for the relevant patent and copyright holders and for developers of non-proprietary software of all kinds, copyleft and copyfree.
In essence, I think the ultimate decision really comes down to whether or not it is better to support the Mozilla Foundation or Google. Your use of their browser not only contributes to their financial success, but also places your vote as a user in the democracy of internet, formats, standards and protocols in their hands. And that discussion is one for another post.




________________


18. Office Suites
the place where free software has the biggest ability to make a dent in the profits of proprietary manufacturers is, at least initially, not in the area of operating systems but rather in the area of productivity software. Microsoft Office increasingly represents a big source of revenue for Microsoft and there already exists a number of free software Office replacement options. Libre Office and Apache Open Office (formerly OpenOffice.org) already exist and run on Windows, Macs, Linux and BSD variants. Google Docs also is an option to replace Office products that operates entirely in the browser and can therefore
As someone who hasn’t owned a copy of Office since 2007 and has exclusively used Libre Office (and before it was forked, OpenOffice.org) and Google Docs on my personal computers for all of my word processing and spreadsheet needs, I can attest that they are not a perfect replacement. There are occasionally some formatting issues when using it with the various Microsoft formats, but especially for non-business use many people would probably prefer to keep save their money and deal with any formatting hiccups when opening .docx files.
The computer ability that it takes to try out a non-Microsoft office suite is only the know-how to download and install an application. Unlike installing a new operating system, merely downloading and installing an application is something most computer users are very familiar with. Booting into an operating system (unless you are using a virtual machine) is also a mutually exclusive software choice. Using Google Docs is even simpler for the millions of people who already have Google accounts because it requires merely going to the appropriate website. Signing up for a Google account is as easy as picking a username and password.
Increasing the popularity of open file formats and dethroning Office as the standard for productivity suites would be a huge strike against restrictively copyrighted software for multiple reasons. First, the fewer copies of Office we buy from Microsoft, the less money they have to develop proprietary software and the more likely it is that the features and capabilities of free and open source software catches up to, passes or further distances itself from the proprietary competition. Secondly, and more importantly, breaking the Office monopoly on productivity suites helps to break their more important monopoly, the use of the closed source .doc, .xls and .ppt formats as the standards for word processor, spreadsheet and presentation formats.
The increasing number of individuals or households that own or have access to multiple computers also create a number of possible scenarios for people to avoid purchasing additional copies of Microsoft Office. For example, a household that owns a desktop computer shared between family members, a laptop or two used primarily by single individuals, and uses other computers at work or in a computer lab at school could probably manage quite well with just a single copy of Microsoft Office on the shared computer or if they don’t often need to send out documents in Microsoft proprietary formats with perfect formatting, could even manage without owning a single copy. At over $100 per copy, there is also a significant financial incentive to avoiding having to purchase a copy of Office from Microsoft.
Beyond even using non-Microsoft software, the mere recognition of open format alternatives to the Microsoft proprietary formats, such as .odt instead of .doc and .docx, and the fact that Word is capable of both opening and saving in .odt formats, even if there are some formatting issues, could go a long a long ways towards breaking the Microsoft monopoly on office suites.
As I touched on in my post on the most libertarian web browser, the IP status and openness of the format that becomes a widely recognized standard is arguably more important than the IP covering the applications that utilize it. That argument is much stronger in the browser market where all browsers are given away for free rather than sold like Microsoft does with Office, even still, it might be the more important than any financial losses that come from fewer copies of Office being sold.
For example, Munich, Germany’s switch to Linux workstations from Windows was significantly complicated by the use of proprietary formats:
Schießl says the transition required enormous background effort which involved eliminating many IT dependencies created by individual vendors over the years. More than 20,000 templates had to be consolidated and converted into new templates, macros or web applications. Most templates and text blocks are now managed via the WollMux program, which was released in 2008. Schießl said that the developers also had to adapt a number of corporate applications such as SAP for use with ODF.
If an open format had been the standard for use from the beginning, which was possible even on Windows, the costs associated with switching would have been reduced. The reduction in the costs of changing software, whether it is operating systems or office suites, creates more market competition and more choices for consumers of such software.


________________


19. Web Video and Audio Formats
A message telling you to install a plug-in to view or listen to online video or audio files is no stranger to a seasoned internet browser. While such requirements may seem like just a minor annoyance to the end user, they represent the tip of the proverbial iceberg in the battles between various software companies over the video and audio formats that are used on the web.
In the most general sense, codecs are programs that can encode and decode a digital data stream and is in fact a portmanteau of "coder-decoder."[124]
The competing options for both video and audio codecs and formats can be very easily broken down into 2 group, proprietary and open. What makes discussions of proprietary codecs much different from our prior discussions of software licenses is that they are restricted by patents rather than copyright. While many of the issues relating to intellectual property restrictions on software are the same for both patents and copyrights, patents are different in a number of important ways.
Copyright terms in the US are 70 years past the death of the author for new works with an individual author or 95 years from publication for corporate works, assuming the length of the copyright term is not again extended by Congress.[125] In the context of the software, it might as well be infinite. Unlike literary works or music, there is not a treasure trove of work published before 1923 in the public domain to draw from. Perhaps some currently written software will be useful a century from now, but I for one won't be betting on it.
In contrast, patents filed on or after June 8, 1995 are protected for 20 years from the filing date.[126] Certainly a long time by the standards of computer technology, but not as long as one might think. For example, the still widely used mp3 format was unveiled for the first time in 1993, nearly 20 years ago.[127] Unless something changes dramatically in the next couple of years, mp3 will be a format with widespread use past the expiration of all of the restrictive patents.
Another distinction is that unlike with copyright, the process of filing and being granted a patent creates the risk of unknown submarine patents. With a work subject to copyright law, the creator of the work owns the entirety of the copyright to it. Knowing the creator means 100% certainty about knowledge of the intellectual property holder. Software algorithms, like those used in codecs, can violate patents that the creators did not even know existed.
The battle over audio formats pits the open Ogg Vorbis codec against the patent encumbered audio formats of the Motion Picture Experts Group, MPEG. Perhaps the most well known of those formats is mp3. Technically the MPEG-1 or MPEG-2 Audio Layer III, the mp3 format is such a universal standard that an entire class of devices are called mp3 players after the audio format of the songs they play. However, the future of HTML5 audio and the web is not the mp3 format. Even if a format restricted by patent licensing requirements continues dominance over audio formats, it will be Advanced Audio Coding, more commonly referred to as AAC, that is part of the MPEG-4 specifications.
Video formats once again feature an Ogg format battling against a format with patent holders looking for users to pay licensing fees. In this case it is the Ogg Theora video codec and the H.264 codec. Video however has a 3rd player not present in the audio competition created from the purchase of a company called On2 by Google. Google irrevocably licensed the patents required to use On2's VP8 video codec to everyone royalty free.
Discussions of audio and video standards and codecs could not be complete without a discussion of MPEG LA. The group was formed in 1990's as a solution to the patent problems that plagued the MPEG-2 formats. Patents were owned by multiple different groups and individually negotiating licenses to use them all with each patent holder created large transaction costs that slowed down the adoption of the standard.[128] The solution that MPEG LA came up with was for patent holders to create a patent pool so that multiple users could license multiple patents from multiple holders, what they call the "many-to-many licensing model."[129]
The group licenses what they believe are all of the necessary patents for a number of video and audio codecs. In terms of the future of audio and video on the web, the most important of these is AVC/H.264. As of this writing, MPEG LA listed 29 patent licensors[130] and 1128 licensees[131] of the technology. It is important to note some of the names that among the 29 companies holding patents, mostly both Apple and Microsoft, as well as companies whose names appear only in the list of licensees, namely Google.
Another aspect of MPEG LA that is important to describe before the discussion continues is the way in which they go about creating patent pools from which to license.
________________


Conclusion
20. Answers to Common Objections
A better title probably would have been “Answers to What I Anticipate Will be Common Objections” as no one has yet objected to any part of my book, but based on what I am familiar 
You are a hypocrite because this book is copyrighted
It is indeed true that this book is copyrighted under a Creative Commons Attribution 3.0 Unported License,[132] but no it’s not hypocritical.
I may have chosen the license, but I did not choose to copyright this book. That decision was made for me by the US federal government. In fact, the use of copyright as a verb as I did in the first sentence of this paragraph is incorrect. Copyright is a noun, not a verb. It is something I have as the result of writing this book, not something I did. According to the government’s website copyright.gov, “Your work is under copyright protection the moment it is created and fixed in a tangible form that it is perceptible either directly or with the aid of a machine or device.”[133] That means there is a reasonable chance, especially if I ever read it or hear it, that your criticism of me is also under copyright. Copyright was made automatic when the US on March 1, 1989[134] with the implementation of the Berne Convention Implementation Act of 1988 after passage by the US Senate.[135]
Now, I would love to wave my copyright and release the work into the public domain. However, it’s not entirely clear if that is legally possible. Stefan Kinsella very effectively outlines the argument that it is impossible or at least not legally clear in a Mises Economics Blog post.[136] His views essentially mirror my own on the issue and because he has a law degree with a specialty in intellectual property, I am going to defer to him on this matter.
Most importantly, it is not clear that any widely used license less restrictive than CC-BY is legally valid around the world. When selecting a license, there are several criteria that were important to me. 
The license should be a widely used and easily recognizable to people who care about such things. There is no reason for people to have to continually look up the actual text of ever license they encounter. There are already too many. 
It should also be legally valid worldwide. The entire purpose of not restricting my work is to allow people to use, modify, and copy it. If they have to consult a lawyer to find out if they can do any of those things or expose themselves to legal risks when they do so, that nearly defeats the entire utilitarian reasons for opposing copyright in the first place. Perhaps, I could take a stand against copyright by dedicating the work to the public domain despite the fact that it would place a number of legal questions surrounding use of my work. While I’m not necessarily opposed to civil disobedience, such action seems to accomplish less in terms of anti-copyright activism than allowing my book to be widely read.
Finally, the license should place a few restrictions on the user as possible. Ideally, I would like to impose no restrictions on those seeking to use my work, but in the event that is not possible for other reasons, minimal restrictions and the restrictions that are least onerous should be prioritized. Requiring the attribution of the work to me seems to fit both of those requirements because it is something that nearly everyone using any text from the book would do anyways.
________________
21. Conclusion




________________










________________


21. Epilogue - Why Open Monopolies Will Win
In the 1990’s and into the early 2000’s 


Now. You are Google. You make your money by selling ads on the most successful search engine in the world. One of your strategic imperatives is therefore this: you cannot allow anyone to operate a technological or regulatory chokepoint between you and people doing searches, otherwise they’ll stunt your earnings growth and siphon off your revenues. That’s why you ran a politico-financial hack on the Federal auction of radio spectrum to ensure a certain minimum level of openness. And that’s why you are, very quietly, the single most determined and effective advocate of network neutrality.
Now, combine these two visions and you’ll understand why Google is doing Android. Their goal is to create the business conditions that will maximize their ad revenue not just two years out but ten years out. Those business conditions are, basically, an Internet that is as friction-free, cheap, and difficult to lock down as the underlying technology can make it.[137]












________________
[1] Hrebejk and Boudreau are both software developers in the Czech Republic.
[2] Petr Hrebejk and Tim Boudreau, "The coming "open monopoly" in software", CNet.com, October 24, 2001, accessed 16 May 2012, http://news.cnet.com/2010-1071-281588.html 
[3] Michele Boldrin and David K. Levine, Against Intellectual Monopoly, Cambridge University Press, 2008, available online at http://levine.sscnet.ucla.edu/general/intellectual/againstfinal.htm
[4]Stephan Kinsella “Against Intellectual Property,” Journal of Libertarian Studies 15 no. 2 (Spring 2001): 1-53, http://mises.org/document/3582.
[5] Pun made with apologies to Ludwig von Mises.
[6] A free copy of the book can be downloaded at http://alongsidenight.net/
[7] Murray N. Rothbard, "The Anti-Party Mentality", Libertarian Vanguard, August–September 1981, available online at http://mises.org/daily/3412
[8] Irwin Schiff, father of libertarian broker, author and radio host Peter Schiff, is currently serving time in prison for failure to pay taxes.
[9] Jeffrey A. Tucker, Bourbon for Breakfast, Mises Institute, 2010, available online at http://mises.org/document/5509 
[10] As some might tell you in the post Citizens United era, perhaps both.
[11] The lecture notes are by Jeff Keele of Porterhouse College and cite an economic text by Edwin G. Dolan, available online at: http://www.portervillecollege.edu/jkeele/Econ%20Power%20point/Chapter%2010%20Keele%20Monopoly.ppt
[12] Boyd-Barrett, Oliver. "National and international news agencies." International Communication Gazette 62.1 (2000): 5.
[13]Eben Moglen, “The dotCommunist Manifesto”, January 2003,  accessed July 6, 2012, online at http://emoglen.law.columbia.edu/my_pubs/dcm.html
[14] US Justice Department, “JUSTICE DEPARTMENT FILES ANTITRUST SUIT AGAINST MICROSOFT FOR UNLAWFULLY MONOPOLIZING COMPUTER SOFTWARE MARKETS”, May 18, 1998, accessed July 9, 2012, online at http://www.justice.gov/atr/public/press_releases/1998/1764.htm 
[15] The list is far to long to list here.
[16]For example see David Kopel, “Justice Attacks Microsoft with Antitrust Vaporware”, This article appeared on cato.org on November 19, 1997, accessed July 9, 2012, online at http://www.cato.org/publications/commentary/justice-attacks-microsoft-antitrust-vaporware and Robert A. Levy, “Beyond the Browser Wars: Antitrust as Vendetta”, August 17, 1998, accessed July 9, 2012, online at http://www.cato.org/publications/commentary/beyond-browser-wars-antitrust-vendetta 
[17] Robert A. Levy, Cato Policy Analysis No. 296 http://www.cato.org/pubs/pas/pa-296.html
[18] Christopher Westley, “The Message of the Microsoft Case”, Mises Daily: Tuesday, December 28, 1999, accessed July 10, 2010, online at http://mises.org/daily/353
[19] Llewellyn H. Rockwell Jr., “Racism at Microsoft?”, Mises Daily: Monday, January 08, 2001 by 
http://mises.org/daily/583/
[20] US Justice Department, “JUSTICE DEPARTMENT FILES ANTITRUST SUIT AGAINST MICROSOFT FOR UNLAWFULLY MONOPOLIZING COMPUTER SOFTWARE MARKETS”, May 18, 1998, accessed July 9, 2012, online at http://www.justice.gov/atr/public/press_releases/1998/1764.htm
[21] Most of the methods at the time actually involved surveys, conducted over the phone, via mail or in person. See Maryann Jones Thompson, “Behind the numbers Browser market share”, CNN, October 08, 1998, accessed July 10, 2012, online at http://articles.cnn.com/1998-10-08/tech/9810_08_browser.idg_1_browser-battle-zona-research-intelliquest-technology-panel
[22] Wikipedia, “Usage share of web browsers”, accessed July 10, 2012, online at http://en.wikipedia.org/wiki/Usage_share_of_web_browsers
[23] Eric S. Raymond, “The Halloween Documents”, accessed July 10, 2012, online at http://www.catb.org/~esr/halloween/index.html
[24] “Halloween Document I (Version 1.17)”, accessed July 10, 2012, online at http://www.catb.org/~esr/halloween/halloween1.html
[25] http://tools.ietf.org/html/rfc2616#section-10.4.5 
[26] “Halloween Document I (Version 1.17)”, accessed July 10, 2012, online at http://www.catb.org/~esr/halloween/halloween1.html
[27] In 1998 Microsoft operating systems were estimated at comprising over 90% of the desktop market, http://news.cnet.com/Windows-95-remains-most-popular-operating-system/2100-1040_3-228773.html
[28] http://news.netcraft.com/archives/category/web-server-survey/ 
[29] http://www.apache.org/history/timeline.html
[30] Virginia Postrel, “What Really Scares Microsoft”, Reason, November 8, 1999, accessed July 11, 2012, online at http://reason.com/archives/1999/11/08/what-really-scares-microsoft/1
[31] Eric S. Raymond, “Why Libertarians Should Not Love Bill Gates”, accessed July 9, 2012, online at http://www.catb.org/~esr/writings/libgates.html 
[32] See for example Walter Block, “Gold is Free Enterprise Money”, speech given at Austrian Economics and Financial Markets conference, February 19, 2005, http://mises.org/media/1348/ 
[33] A much stronger case will be made for this argument later in this book and particularly in the Epilogue.
[34] Yes, I know that there are some of you out there who would say these people are no really libertarians at all. However, here I want to 
[35] Françoise Melese, “Piling on Microsoft”, The Free Market, February 1998, Volume 16, Number 2, online at http://mises.org/freemarket_detail.aspx?control=95
[36] Stephan Kinsella, “Understanding IP: An Interview with Stephan Kinsella”, Mises Daily: Thursday, October 21, 2010, accessed July 9, 2012, online at http://mises.org/daily/4792.
[37] Two Firefox plugins did deliver ActiveX support, but they were last updated in 2005 and 2008.
[38] Needs better citation than just http:/ / en. wikipedia. org/ wiki/ Statute_of_Monopolies_of_1623
[39] http:/ / news. cnet. com/ 2100-1023-208651. html and http:/ / www. cnn. com/ TECH/ computing/ 9803/ 03/ gates. full/
[40] http:/ / mises. org/ books/ mespm. pdf page 698
[41] Ibid. pages 668-669. Rothbard would write on page 670 about a similar definition he quotes from Francis Wyland that:
It is obvious that this type of monopoly can never arise on a free market, unhampered by State interference. In the free economy, then, according to this definition, there can be no “monopoly problem.”33 Many writers have objected that brand names and trade-marks, generally considered as part of the free market, really constitute grants of special privilege by the State. No other firm can “compete” with Hershey chocolates by producing its own product and calling it Hershey chocolates.34 Is this not a State-imposed restriction on freedom of entry? And how can there be “real” freedom of entry under such conditions?
[42] Milton Friedman, Free to Choose, p. 53-54
[43] For a rebuttal see Thomas J. DiLorenzo, The Review of Austrian Economics Vol. 9, No. 2 (1996): 43-58 ISSN 0889-3047 http://mises. org/journals/ rae/ pdf/ RAE9_2_3. pdf
[44] Which reads “To promote the progress of science and useful arts, by securing for limited times to authors and inventors the exclusive right to their respective writings and discoveries;”
[45] Galambos' ideas about intellectual property are so extreme that Stephan Kinsella remarked in a footnote of Against Intellectual Property (p.17): 
I also met a real, live Galambosian once, much to my surprise (I had supposed that they were fictional creations of Tuccille [It Usually Begins with Ayn Rand, pp. 69–71])at a Mises Institute conference a few years ago.
[46] Schulman famously introduced his arguments in favor of IP in a 1983 debate with Wendy McElroy and then later wrote them down in an article “Informational Property: Logorights.” Journal of Social and Biological Structures (1990), online at http://jneilschulman.rationalreview.com/2009/12/classic-j-neil-informational-property-logorights/ . 
[47] See Kinsella, N. Stephan Against Intellectual Property pp. 16-17 and 23-28 for brief summaries of the arguments of all 3.
[48] Of course, if you really had taken F.A. Hayek's lesson to heart when he wrote in The Fatal Conceit that “the curious task of economics is to demonstrate to men how little they really know about what they imagine they can design,” perhaps this would be unneccessary.
[49] Lyman Ray Patterson, "Copyright And `The Exclusive Right' Of Authors", Journal of Intellectual Property, Vol. 1, No.1, Fall 1993, online at http://digitalcommons.law.uga.edu/cgi/viewcontent.cgi?article=1342&context=fac_artchop. Patterson explains:
The event in the history of Anglo-American copyright that led to the shaping events of the seventeenth and eighteenth centuries was the Charter of the Stationers' Company granted in 1556 by Philip and Mary .... The Charter gave the stationers the power to make "ordinances, provisions, and statutes" for the governance of "the art or mistery of [s]tationery," as well as the power to search out illegal presses and books and things with the power of "seizing, taking, or burning the foresaid books or things, or any of them printed or to be printed contrary to the form of any statute, act, or proclamation ...."
The power to burn offending books was a benefit to the sovereign (a weapon against unlawful publications), and a boon to the stationers (a weapon against competition). The book-burning power thus shows the real motivation for the Charter, to secure the allegiance of the stationers as policemen of the press for the sovereign in an uncertain world.
[50] For a longer history of copyright see Karl Fogel, “The Surprising History of Copyright and The Promise of a Post-Copyright World”, online at http://questioncopyright.org/promise
[51] The history of intellectual property in computer software will be discussed in much greater detail in upcoming chapters. For now it is sufficient to cite Diamond vs. Diehr, 450 U. S. 175 (1981) as the beginning of patent protection and Apple Computer, Inc. v. Franklin Computer Corp., 714 F.2d 1240 (3d Cir. 1983) as the first case of full copyright protections.
[52] See http:/ / www. sitasingstheblues. com/ to watch the movie and for more information about it. For more on the money and distribution see Karl Fogel, “The Sita Sings the Blues Distribution Project,” January 3, 2009, Accessed May 3, 2012, http:/ / questioncopyright. org/ sita_distribution.
[53] For an excellent overview of how lack of intellectual property in the fashion industry contributes to the rapid pace of innovation see Johanna Blakey, “Lessons from fashion's free culture”, Ted Talk, April 2010, http:/ / www. ted. com/ talks/ johanna_blakley_lessons_from_fashion_s_free_culture. html.
[54] Kinsella, Against Intellectual Property, pg. 14-15.
[55] The most notable being David Friedman and the arguments he laid out in his book The Machinery of Freedom: Guide to a Radical Capitalism, 1989, La Salle, IL: Open Court, 2nd ed.


[56] You can watch it online at http://www. youtube.com/watch?v=djVaJN0f0VQ and full lyrics are available at http://blog.ninapaley.com/2009/12/15/minute-meme-1-copying-is-not-theft/.
[57] The name of the style of argument is Latin for "reduction to the absurd." http://www. iep.utm.edu/reductio/
[58] citation with a quote needed
[59] "Information Property: Logorights", full cite and quotation needed [11] Roderick T. Long, "The Libertarian Case Against Intellectual Property Rights", Formulations Autumn 1995, Online at http://freenation.org/a/f31l1.html#3.
[60] Black Duck Software, “Black Duck KnowledgeBase”, accessed July 8, 2012, online at http://www.blackducksoftware.com/knowledgebase.
[61] The word count that gedit  comes up with for the words from “Terms and Conditions” through “Last Updated: May 23, 2012” is exactly 15,428 for the version that appeared online at http://www.apple.com/legal/itunes/us/terms.html on July 8, 2012.
The exact phrasing of the ban on using iTunes to create WMDs is:
You also agree that you will not use these products for any purposes prohibited by United States law, including, without limitation, the development, design, manufacture, or production of nuclear, missile, or chemical or biological weapons.
[62] The episode was Season 15 Episode 1, “HUMANCENTiPAD” and can be watched online at http://www.southparkstudios.com/full-episodes/s15e01-humancentipad. Be warned, despite being a cartoon, the show is not for the faint of heart.
[63] http://oreilly.com/openbook/freedom/ch01.html
[64] http://www.gnu.org/philosophy/free-sw.html
[65] http://questioncopyright.org/copyright_and_open_source
[66] http://www.gnu.org/philosophy/free-sw.html
[67] http://www.gnu.org/licenses/license-list.html#JSON
[68] Eric S. Raymond, "The Cathedral and the Bazaar", 2000, online at http://www.catb.org/~esr/writings/cathedral-bazaar/
[69] Open Source Initiative, "History of the OSI", accessed July 5, 2012, online at http://www.opensource.org/history
[70] Ibid.
[71] Mitchell Baker, "January 22, 1998 — the Beginning of Mozilla", January 22nd, 2008, accessed July 5, 2012, online at http://blog.lizardwrangler.com/2008/01/22/january-22-1998-the-beginning-of-mozilla/
[72] Open Source Initiative, "History of the OSI", accessed July 5, 2012, online at http://www.opensource.org/history
[73] Richard M. Stallman, "Why Open Source misses the point of Free Software", 2010, accessed July 5, 2012, online at http://www.gnu.org/philosophy/open-source-misses-the-point.html
[74] http://www.itworld.com/it-managementstrategy/233753/gpl-copyleft-use-declining-faster-ever http://blogs.the451group.com/opensource/2011/12/15/on-the-continuing-decline-of-the-gpl/
[75] Eric S. Raymond, "Evaluating the harm from closed source", June 6 2012, accessed June 8, 2012, online at http://esr.ibiblio.org/?p=4371 
[76] Elliott, Margaret S, and Walt Scacchi. "Mobilization of software developers: the free software movement." Information Technology & People 21.1 (2008): 4-33. http://www.isr.uci.edu/~wscacchi/Papers/New/Elliott-Scacchi-Free-Software-Movement.pdf 
[77] Carl Menger, Principles of Economics, 1871, Translated by Janes Dingwall and Bert F. Hoselitz, 1976, Institute for Humane Studies, Auburn, AL: Ludwig von Mises Institute, 2007,http://mises.org/etexts/menger/three.asp
[78] Eric S. Raymond, "Evaluating the harm from closed source", June 6 2012, accessed June 8, 2012, online at http://esr.ibiblio.org/?p=4371
[79] Eric S. Raymond, "Incentives to be Open", April 19 2010, accessed July 1, 2012, online at http://esr.ibiblio.org/?p=1917 
[80] Alexis de Tocqueville Institution, "Opening the Open Source Debate: A White Paper", June 2002, the original paper can no longer be found online as the Alexis de Tocqueville Institution is no longer operating. The quote is sourced through A. Boulanger, "Open-source versus proprietary software: Is one more reliable and secure than the other?", IBM Systems Journal, Vol. 44, No. 2, 2005, pg. 247, online at http://www.cs.bris.ac.uk/Teaching/learning/how-to-lectures/boulanger.pdf
[81] A. Boulanger, "Open-source versus proprietary software: Is one more reliable and secure than the other?", IBM Systems Journal, Vol. 44, No. 2, 2005, pg. 247, online at http://www.cs.bris.ac.uk/Teaching/learning/how-to-lectures/boulanger.pdf
[82] Reasoning, "How Open-Source and Commercial Software Compare: A Quantitative Analysis of TCP/IP Implementations in Commercial Software and in the Linux Kernel", 2003, online at http://www.reasoning.com/pdf/Open_Source_White_Paper_v1.1.pdf
[83] Reasoning, "How Open-Source and Commercial Software Compare: Database Implementation in Commercial Software and in MySQL", 2003, online athttp://www.reasoning.com/pdf/MySQL_White_Paper.pdf
[84] Ibid.
[85] Microsoft has attempted to do just this via a group of licenses of varying levels of restriction in a program called their Shared Source Initiative. More information is available online at http://www.microsoft.com/en-us/sharedsource/default.aspx.
[86] Adam Messinger, "Introducing the Innovator's Patent Agreement", Twitter Blog, April 17, 2012, accessed July 6, 2012, online at http://blog.twitter.com/2012/04/introducing-innovators-patent-agreement.html
[87] Otherwise this entire book would be unnecessary.
[88] Reuters, "FACTBOX: History of the mobile technology patent war", July 5, 2012, accessed July 6, 2012, online at http://www.reuters.com/article/2012/07/05/apple-google-patents-idINDEE86407T20120705
[89] "Patent US8046721 - Unlocking a device by performing ... - Google." 2011. 7 Jul. 2012 <http://www.google.com/patents/US8046721>
[90] "Patent USD504889 - Electronic device - Google Patents." 2011. 7 Jul. 2012 <http://www.google.com/patents/USD504889>
[91] http://www.documentfoundation.org/faq/
[92] http://www.libreoffice.org/download/license/
[93] “Why you shouldn't use the Lesser GPL for your next library", Free Software Foundation, Inc. 1999, 2007, accessed June 18, 2012, online at http://www.gnu.org/licenses/why-not-lgpl.html
[94] Chandrasekar Subramaniam, Ravi Sen, and Matthew L. Nelson, “Determinants of open source software project success: A longitudinal study”, Decision Support Systems 46 (2009) 576–585.
[95] Eric S. Raymond, “The Economic Case Against the GPL”, April 26, 2009, accessed July 16, 2012, online at http://esr.ibiblio.org/?p=928
[96] Troy Unrau, "Skype loses GPL lawsuit in Germany", July 25 2007, accessed July 2, 2012, online at http://arstechnica.com/information-technology/2007/07/skype-loses-gpl-lawsuit-in-germany/
[97] Microsoft News Center, "Microsoft Contributes Linux Drivers to Linux Community", July 20, 2009, accessed July 2, 2012, online at http://www.microsoft.com/en-us/news/features/2009/Jul09/07-20LinuxQA.aspx. It is also interesting to note that the term "open source" appears over 30 times in the press release while the words free or freedom, much less the term "free software" are no where to be found. A telling sign about which side of the open source vs. free software debate that Microsoft falls on.
[98] Gordon Haff, "Microsoft's hand forced on open-source driver release", CNET, July, 23rd 2009, accessed July 2, 2012, online at http://news.cnet.com/8301-13556_3-10294282-61.html
[99] Sam Ramji, "Releasing the Linux Integration Component Drivers...", 23 Jul 2009, accessed July 3, 2012, online at http://blogs.technet.com/b/port25/archive/2009/07/23/releasing-the-linux-integration-component-drivers.aspx
[100] A copy of the license is available online at http://www.gnu.org/licenses/gpl.html
[101] Richard M. Stallman, "Copyleft: Pragmatic Idealism", accessed 13 May 2012, available online at http://www.gnu.org/philosophy/pragmatic.html
[102] http://www.mozilla.org/MPL/2.0/FAQ.html
[103] http://www.gnu.org/cgi-bin/license-quiz.cgi
[104] The Windows® Phone Marketplace Application Provider Agreement (Updated June 2011), accessed 14 May 2012 at http://create.msdn.com/downloads/?id=638, section 1 subpoint l reads:
“Excluded License” means any license requiring, as a condition of use, modification and/or distribution of the software subject to the license, that the software or other software combined and/or distributed with it be (i) disclosed or distributed in source code form; (ii) licensed for the purpose of making derivative works; or (iii) redistributable at no charge. Notwithstanding the foregoing, the following software licenses are not considered Excluded Licenses: CDDL 1.0 (Common Development and Distribution License); CPL 1.0 (Common Public License); Eclipse Public License; Microsoft Reciprocal License (MS-RL); and MPL 1.1 (Mozilla Public License). The GNU General Public License version 3, the GNU Affero General Public License version 3, the GNU Lesser General Public License version 3, and any equivalents to the foregoing are considered Excluded Licenses.
[105] http://arstechnica.com/apple/2011/01/vlc-for-ios-vanishes-2-months-after-eruption-of-gpl-dispute/
[106] Free Software Foundation, “Why you shouldn't use the Lesser GPL for your next library”, 1999, accessed July 20, 2012, online at http://www.gnu.org/licenses/why-not-lgpl.html
[107] ODF Alliance, “MS Office 2007 Service Pack 2 With Support for ODF: How Well Does It Work?”, online at http://www.odfalliance.org/resources/fact-sheet-Microsoft-ODF-support.pdf
[108] And I hope there is a special place in hell reserved for someone who would do such a thing.
[109] Which they could not do and still keep their software closed source because Linux is licensed under the GPL v.2.
[110] Which interestingly enough they did not choose to do entirely. Instead releaseing some of the core code under a permissive license via the Darwin project.
[111] Valve, “Steam’d Penguins”, Valve Linux Blog, July 16, 2012, accessed July 21, 2012, online at http://blogs.valvesoftware.com/linux/ 
[112] Eric S. Raymond, "Evaluating the harm from closed source", June 6 2012, accessed June 8, 2012, online at http://esr.ibiblio.org/?p=4371
[113] Ibid.
[114] For one such book see Peter H. Salus, A Quarter Century of Unix, Addison-Wesley Pub. Co., 1994
[115] Richard Stallman, "Why GNU/Linux?", 2007, accessed June 9, 2012, online at http://www.gnu.org/gnu/why-gnu-linux.html
[116] http://www.debian.org/ports/kfreebsd-gnu/
[117] Wikimedia Traffic Analysis Report - Operating Systems, April 1-30, 2012, accessed June 9, 2012, online at http://stats.wikimedia.org/wikimedia/squids/SquidReportOperatingSystems.htm
[118] Some examples of other BSD operating systems include NetBSD, DragonFly BSD and GhostBSD.
[119] Jordan Hubbard, “1.3.2 FreeBSD Project Goals”, FreeBSD Handbook, accessed July 16, 2012, online at http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/history.html
[120] Ken Florance, “Announcing the Netflix Open Connect Network”, The Official Netflix Blog, June 4, 2012, accessed July 16, 2012, online at  http://blog.netflix.com/2012/06/announcing-netflix-open-connect-network.html 
[121] Scott Long, “Netflix's New Peering Appliance Uses FreeBSD”, email to the freebsd-stable mailing list, June 6, 2012, accessed July 16, 2012, online at http://lists.freebsd.org/pipermail/freebsd-stable/2012-June/068129.html 
[122] All of the hardware vendors listed on the FreeBSD website sell servers and not personal computers http://www.freebsd.org/commercial/hardware.html
[123] Amanda McPherson, Brian Proffitt, and Ron Hale-Evans, "Estimating the Total Development Cost of a Linux Distribution", Linux Foundation Whitepaper, October 2008, http://www.linuxfoundation.org/sites/main/files/publications/estimatinglinux.html
[124] http://en.wikipedia.org/wiki/Codec
[125] For works published in the past the length of the copyright term is highly variable. See http://copyright.cornell.edu/resources/publicdomain.cfm for an explanation of those terms.
[126] For patents filed before June 8, 1995, the term is the longer of 17 years from the issue date or 20 years from the filing date.
[127] However, due to technicalities regarding the length of patents, it will not become a fully free audio format until 2017. Seehttp://www.osnews.com/story/24954/US_Patent_Expiration_for_MP3_MPEG-2_H_264 and http://www.tunequest.org/a-big-list-of-mp3-patents/20070226/
[128] MPEG LA, "A History of Success – A Future in Innovation", accessed July 2, 2012, online at http://www.mpegla.com/main/Pages/AboutHistory.aspx
[129] MPEG LA, "Revolutionizing Intellectual Property Rights Management", accessed July 2, 2012, online at http://www.mpegla.com/main/Pages/About.aspx
[130] http://www.mpegla.com/main/programs/AVC/Pages/Licensors.aspx
[131] http://www.mpegla.com/main/programs/AVC/Pages/Licensees.aspx
[132] http://creativecommons.org/licenses/by/3.0/
[133] http://www.copyright.gov/help/faq/faq-general.html#mywork
[134] Just months before I was born.
[135] http://en.wikipedia.org/wiki/Berne_Convention_for_the_Protection_of_Literary_and_Artistic_Works. Also see Irvin Molotsky, “Senate Approves Joining Copyright Convention”, New York Times, October 21, 1988, accessed July 7, 2012, online at http://www.nytimes.com/1988/10/21/arts/senate-approves-joining-copyright-convention.html.
[136] Stephan Kinsella, “Copyright is very sticky!”,  Mises Economics Blog, January 14, 2009, accessed July 7, 2012, online at http://archive.mises.org/9240/copyright-is-very-sticky/.
[137] http://esr.ibiblio.org/?p=614
[a]Patrick McEwen:
I don't like these paragraphs. They need to be rewritten.
[b]Patrick McEwen:
finish
[c]Patrick McEwen:
rework
[d]Patrick McEwen:
Needs to be inserted somewhere into the introduction.
[e]Patrick McEwen:
Double check that wording is correct. ActiveX may has used different language when asking permission to do whatever it was asking to do.
[f]Patrick McEwen:
I don't like this phrasing
[g]Patrick McEwen:
Next sentence needs to discuss proprietary BSD Unix's and early 90's court battles


Also a good spot to mention that Linus Torvalds said if he knew about 386 BSD he never would have created Linux.