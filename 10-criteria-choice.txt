9. The Criteria of Choice

In a proper and comprehensive case for using software with as few copyright restrictions as possible, the starting point would be some kind of ethical framework in which the evaluate the harms and benefits of various software choices. I am going to intentionally choose not to develop such an ethical framework for several reasons.

The arguments are able to transcend multiple potential ethical frameworks. In similar fashion to the way that opposition to patents and copyrights can be justified in both a completely deontological and a completely utilitarian fashion, as described in Chapter 5, there are multiple ethical frameworks that could be used to discuss the harms from restrictively licensed software. Developing any single one both distracts from the important arguments and unnecessarily risks creating disagreement that is just a further distraction.

However, I will reject one potential application of , the strictly principled approach of never using software with a restrictive license. First of all, that it is a framework that is impossible to put into practice, at some point you will end up using proprietary, closed source software whether by choice or because you use an elevator that runs closed source firmware. Software is so pervasive in society today, that one would be frozen in inaction for fear of accidentally using closed source software or even using a product that had been developed with closed source software. Secondly, the time of any software licensing activist is limited and thus most choose to focus their efforts on the most important software.[75]

Such an approach is also not even universally accepted within the free software development community. Some developers believe that free software projects ought to only be completed using free software tools, while others are willing to compromise if no viable alternative exists for producing something like documentation for the code.[76]

Fundamentally, this book is about making choices as a software consumer and thus it is through that lens that a framework for comparing potential software choices will be developed.

Basic microeconomic theory tells us that the two most important considerations when making a decision as to what software to use are the quality of the software and the price at which at which that software is available to the consumer. For the purposes of this book, a more detailed analysis of consumer choice is not necessary. Though behavior economics and psychology potentially have much more to tell us about the habits of consumers, such discussions are far beyond the scope of this book.

Dealing with the monetary price someone pays for software is rather easy. When it comes to permissively licensed software there are essentially two prices, free and incredibly expensive. If the software already exists, copies are almost certainly given away for free by someone. If it doesnâ€™t, then the only way to acquire it is to pay a programmer to write it. This book is aimed primarily at consumers of software for personal use and thus for our purposes, only software that someone has already written and is distributing for free will be discussed. While many of the arguments apply to business consumers of custom software at every level from website design to the software that is used to monitor a power plant, a detailed discussion of those purchases is well beyond the scope of this analysis.

Consistent with the subjective theory of value that stems from the work of Carl Menger,[77] the analysis contained in this following chapters of this book will assume that every potential software consumer will internalize the benefits of software given away for free over software they must pay for differently. Other non-monetary prices such as the time of technical skill required to acquire or install software and the learning curve for a new user also may vary significantly. There are some people who need a certain functionality in their software at nearly any price, but even these people if given a choice between software with equivalent functionality can be assumed to choose the cheaper software when presented with multiple options that meet their needs. Likewise, this analysis will assume that there are at least some software consumers who could be persuaded to sacrifice some functionality from their software in exchange for a price discount.

With the issue of monetary price not requiring much analysis, that leaves the needs of the software consumer to be balanced against the larger implications of the intellectual property governing the software in question to be the focus of the bulk of our analysis with the occasional advantage of price factored in. As Richard Stallman and the free software movement have learned time and time again, ease of use and functionality trump freedom and price every time in the wider consumer software market and perhaps even more so in the commercial market. Whatever the advantages of open source for development, it means little to consumers looking to use the software unless those advantages materialize in a product that better meets their needs.

In cases where there exists software that is licensed with as few restrictions as possible that contains all of the functionality of its more restrictive competition, the discussion will essentially end after making those points. The more restrictively licensed software can only be more expensive than it's permissively licensed competitor and thus wins or ties in functionality, price and license. Thus such software is the logical choice regardless of how one weighs those factors into their choice.

In cases where software with one of the preferred licenses fails to measure up to the competition either in functionality or perhaps does not even exist at all, the analysis becomes much more nuanced. In theses cases, it is assumed that different users have different levels of need for different functionality and a different willingness and ability to trade functionality and ease of use for the benefits of a less restrictive license. Some users absolutely require the missing functionality and simply can't do without it. Other users perhaps lack the computer skills or knowledge to be able to use certain software. Still others may find that the benefits of permissively licensed software are outweighed by addition functionality from more restrictively licensed software.

The analysis contained in the following chapters will take into account as many of these potential frameworks for evaluation as possible when they are applicable in an attempt to allow all readers to make decisions for themselves. The second case where missing functionality is weighed against the benefits of more permissive licensing is by far the more nuanced and is the one that requires the most analysis.

In such a decision, lost functionality and the cost of missing such functionality varies depending on the software in question and only the individual user can really know how much they value that functionality. The costs of using restrictively licenses software are much more abstract and vary depending on the type of software as well. The other issue is that a comparison is not as simple as a libertarian license compared to a more restrictive license because there are so many kinds of such licenses, all with varying kinds of restrictions.  an analysis of them stands to benefit from some type of framework.

____________

[75] Eric S. Raymond, "Evaluating the harm from closed source", June 6 2012, accessed June 8, 2012, online at http://esr.ibiblio.org/?p=4371 
[76] Elliott, Margaret S, and Walt Scacchi. "Mobilization of software developers: the free software movement." Information Technology & People 21.1 (2008): 4-33. http://www.isr.uci.edu/~wscacchi/Papers/New/Elliott-Scacchi-Free-Software-Movement.pdf 
[77] Carl Menger, Principles of Economics, 1871, Translated by Janes Dingwall and Bert F. Hoselitz, 1976, Institute for Humane Studies, Auburn, AL: Ludwig von Mises Institute, 2007,http://mises.org/etexts/menger/three.asp
