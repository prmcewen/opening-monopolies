17. Operating Systems

Operating systems are software that manages computer hardware and functions in between that hardware and the applications that run on the computer. Examples include Microsoft's Windows and Apple's OS X.

Though the line can occasionally be blurry in modern complex devices, for our discussion operating systems shall be considered distinct from firmware. Firmware is the read only software stored in the memory of a device that is used to enable basic functions. Examples include the software that allows your TV remote and microwave to work. Desktop computers also have firmware that boots into the operating system when a computer is turned on. Firmware is different than a full fledged operating system in that it is usually stored in read only memory, cannot run applications and is usually never updated during the lifetime of the device.

Before the discussion turns to specific operating systems and the intellectual property controlling their use and distribution, it is important to discuss the potential harms from various levels of restrictive operating system licensing. Developed in the previous section, there are 7 types of harm to be discussed - reliability, unhackability, lock-in, amnesia, agency, network effects and copyleft.

Eric S. Raymond argues in laying out his framework for reliability harm that operating systems score moderate to high on the reliability harm scale depending on the mix of applications in use and the opportunity cost of OS failures.[112] I shall largely defer to his expertise and knowledge of operating systems, but want to elaborate on his contention about the dependence of this operating system harm on the application being used.

However, the less technically skilled computer user that this book is aimed at compared to Raymond's audience of largely programmers will be likely to find the reliability harm escalated by their inability to fix even basic problems and even more dependent upon the harm of the application they are using because they are far more likely to use only applications compared to core operating system functions. In the case of fixing problems, less skilled users will find even basic bugs potentially crippling. Advanced users are much more likely to know how to fix problems, find work arounds and even just to attempt to solve the problem in the first place. This renders a far wider range of bugs fatal to their computer use for basic to average users. Less advanced users are also more likely to use computers entirely for a set of basic applications such as an internet browser, music player and word processor. This makes operating system issues that don't affect those applications less harmful and those that do even more. Thus the harm is more dependent upon the applications being used in conjunction with the operating system.

Raymond rates the unhackability harm high as well arguing that even if the user is not a programming the lack of ability to alter the code on your own is important "because closed source means you get fixes and updates and new features not when you can invest in them them but only when the vendor thinks it’s time."[113] However, this explanation applies nearly exclusively to a business consumer of software. A typical consumer using an operating system at home either won't have the resources or won't be willing to invest them to hire someone to fix a bug or add a feature to their operating system. Even with the assumption that open source development is better at fixing such things, such a consumer is still at the mercy of the software developer to fix the bugs or add features. Open source licenses do add the option for someone to fork the code and add in bug fixes or new features that does not exist for closed source or restrictively licensed software, but that process takes time for someone to get tired enough of waiting to do and even more time to knowledge of the alternative software to reach the consumer.

Therefore, for the average consumer of software for personal use, unhackability harm of an operating system is more likely to be low to medium, with the different coming at the advantages of open source development for pushing out bug fixes and new features faster than closed source proprietary development.

Raymond makes the argument that operating systems are very high on agency harm because of the software the comes bundled with them. He cites the so-called "crapware" that comes bundled with most Windows systems, but that may be the least effective way that operating system developers exert control over users via the software that is installed by default on their operating systems. There is a compelling case to make that the useful software is even more important.

A useful case study to this effect are the default web browsers that come bundled with operating systems. Though the dynamics of the browser market are complex and the main thrust of the analysis will be saved for the chapter in this book devoted entirely to browsers, there is little doubt that the default browsers of Microsoft's Windows, Internet Explorer, and Apple's OS X, Safari, would not be as successful as they are without the advantage of being the default browser of their respective operating systems. Browser usage statistics are difficult to determine and different metrics will inevitably have different usage shares for each browser.

Turning our attention to the choices in operating systems themselves, if the modern desktop operating systems were to be looked at from an evolutionary perspective similar to the way that living things are classified, the first distinction would be between Unix-like operating systems and Microsoft operating systems, all recent versions of which have been called Windows.

Consistent with the criteria laid out previously in this book, for operating systems the assumption that everyone needs to use a computer with basic capabilities such as web browsing, word processing and the occasional game that they can operate without needing a computer science degree will be used to narrow down the list of operating systems that must be discussed. Since the decision to go with a Windows operating system usually occurs when a new computer is purchased, only Windows 7 and 8, with what information is available about it, will be considered from the Microsoft family of operating systems. While it will not be discussed, much of will be said about Windows 7 and 8 also apply to the various editions of Windows Server that are available.

The history of Unix-like operating systems began with the development of the original UNIX by AT&T at Bell Labs in 1969. There are too many different variations of Unix compliant and Unix-like operating systems to discuss all of them even in passing and the history of Unix is extensive enough in itself to merit entire books on the subject,[114] so we shall limit the discussion to the two major branches that have relevance in the consumer market today, Linux and the Berkeley Software Distribution family of operating systems.

Richard Stallman and those helping on the GNU project were not the only programmers who were frustrated with the lack of a free operating system and decided to do something about it. A computer science graduate student at the University of Helsinki in Finland named Linus Torvalds was among them.
He had been using a Unix-like operating system called MINIX which had a free license, but only for educational and academic use. Wanting a free operating system under a less restrictive license that he could tinker with on his personal computer without the high cost of Sun’s Unix, he set out to develop a kernel that could be combined with other free software such as the Emacs text editor and C compiler written by the GNU team to create an entire operating system. Keeping with the spirit of giving Unix-like operating systems names that ending in "nix" he called his kernel Linux.

Though technically only the kernel is called Linux, the name is often used for the entire operating system. Richard Stallman argues that the appropriate name for the operating system as a whole is GNU/Linux, citing the superior technical accuracy and political implications of the inclusion of GNU in the name.[115] The nature of the Linux kernel and the GNU/Linux operating system means that it is possible to both create an operating system that uses only the Linux kernel, the notable example being Google's Android operating system, and to create a version of the GNU/Linux operating system that doesn't actually use the Linux kernel, which makes it not a version of GNU/Linux. The popular GNU/Linux distribution Debian has created an operating system that uses the GNU userland combined with the FreeBSD kernel to create a distribution that it calls Debian GNU/kFreeBSD.[116]

In hopes that the preceding paragraph will suffice to save me from the bulk of the wrath of the free software purists who refuse to call the entire operating system just Linux, the rest of this book will use Linux to refer to the entire GNU/Linux operating system as is commonly done so even in communities of Linux users and will specify the Linux kernel when referencing only the Linux kernel.

As the name suggests, the Berkeley Software Distribution, BSD, family of operating systems originated at the University of California - Berkeley in the late 1970's. BSD operating systems are important to our discussion for 2 important reasons.

First, one BSD operating system, FreeBSD, is the most popular operating system that is licensed mostly under a license consistent with libertarian anti-IP principle, the BSD license. The April 2012 traffic analysis of all of the website in the Wikimedia family, the most notable of which is Wikipedia, shows that computers running FreeBSD were responsible for about 9.2 million requests. Though that number represents a paltry 0.01% of the total requests received, it is a factor of about 10 more popular than the second most used permissively licensed operating system, OpenBSD.[117] However, with perhaps some extremely minor exceptions, everything that I will say about the benefits of FreeBSD is applicable to any of the other operating systems in the BSD family with BSD licenses.[118]

The second and perhaps more important reason that BSD operating systems require inclusion in our discussion is that Apple's OS X operating system heavily borrows code from FreeBSD. In fact, Apple contributes some of their code back to the open source community through the Darwin project which releases the code that forms of the core of OS X and iOS.

Turning to the decision of which operating system and putting functionality aside for the moment, there is no question that the operating system most consistent with libertarian principles is FreeBSD. Though it does use some code that is GPL licensed, an effort is made to have as much of the code as possible use a copyfree license.[119] The direct impact of the license can be seen in Apple’s use of FreeBSD code by way of the NeXTSTEP operating system that formed the basis of OS X. FreeBSD is not an obscure operating system with no relevance either. When Netflix decided to build their own content delivery network to replace the general purpose commercial ones they had been using previously,[120] they selected FreeBSD as the operating system to run on their servers.[121]

Functionality on the FreeBSD desktop is a whole different story. Of the 4 operating systems it will require the most technical knowledge and will have the fewest applications. The first problem that it is all but impossible to buy a personal desktop computer with FreeBSD already installed.[122] It is almost certainly easier to find someone willing to sell you a new computer with no operating system on it. That means the only choice for someone who wants to run FreeBSD on their personal computer is to install it themselves.

Of all the purely software related tasks that could be done on a computer, the process of installing a new operating system or partitioning a hard drive to install a second or third operating system is not particularly difficult. However, in terms of the damage that can be done to the potential to take a perfectly functioning computer and render it temporarily useless, the risk could not be higher. The series of tasks required, creating bootable media, booting the computer from an operating system on a place other than the hard drive, and partitioning the computer’s hard drive are also entirely specific to using or installing different operating systems on a computer. Thus, doing so it not something I recommend anyone do for the first time without ensuring that you have nothing on your hard drive that you would miss if it all were erased, aren’t going to be needing your computer for anything in the near future and have a friend nearby who can ensure you at least have a workable operating system on your computer in the event something goes wrong.

However, for someone who is familiar with the process of installing operating systems, FreeBSD is relatively easy to install if a version of PC-BSD, a preconfigured distribution based on FreeBSD that comes with a graphical installer, is used. It can also be tested in a virtual machine or from a live CD, DVD or USB drive. Though the installation process is perhaps not quite as polished and the graphical installer not quite as nice as some of the Linux distributions I have installed, the experience is quite similar.

Without considering functionality, Linux is the next best operating system up for consideration. The major difference in terms of support over FreeBSD is that Linux has enough users to cause a number of application developers explicitly help users install their software on Linux systems. Browsers like Chrome, Firefox and Opera are all made easy to install on Linux by their developers.

However, not all commonly used applications come in Linux variants. Three of the most popular that do not are Microsoft Office, Apple’s iTunes and the Adobe Creative Suite, which inclues Photoshop. Of course there are FOSS alternatives to all 3. Microsoft Office and the open source competition will be discussed in detail in a coming chapter. There are numerous alternatives for playing music in native Linux applications such as Banshee and Rhythmbox that adequately fill the role of playing your library of music.

__________

[112] Eric S. Raymond, "Evaluating the harm from closed source", June 6 2012, accessed June 8, 2012, online at http://esr.ibiblio.org/?p=4371
[113] Ibid.
[114] For one such book see Peter H. Salus, A Quarter Century of Unix, Addison-Wesley Pub. Co., 1994
[115] Richard Stallman, "Why GNU/Linux?", 2007, accessed June 9, 2012, online at http://www.gnu.org/gnu/why-gnu-linux.html
[116] http://www.debian.org/ports/kfreebsd-gnu/
[117] Wikimedia Traffic Analysis Report - Operating Systems, April 1-30, 2012, accessed June 9, 2012, online at http://stats.wikimedia.org/wikimedia/squids/SquidReportOperatingSystems.htm
[118] Some examples of other BSD operating systems include NetBSD, DragonFly BSD and GhostBSD.
[119] Jordan Hubbard, “1.3.2 FreeBSD Project Goals”, FreeBSD Handbook, accessed July 16, 2012, online at http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/history.html
[120] Ken Florance, “Announcing the Netflix Open Connect Network”, The Official Netflix Blog, June 4, 2012, accessed July 16, 2012, online at  http://blog.netflix.com/2012/06/announcing-netflix-open-connect-network.html 
[121] Scott Long, “Netflix's New Peering Appliance Uses FreeBSD”, email to the freebsd-stable mailing list, June 6, 2012, accessed July 16, 2012, online at http://lists.freebsd.org/pipermail/freebsd-stable/2012-June/068129.html 
[122] All of the hardware vendors listed on the FreeBSD website sell servers and not personal computers http://www.freebsd.org/commercial/hardware.html
