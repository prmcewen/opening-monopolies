16. Permissive Software as an Open Monopoly Trojan Horse

Imagine for a moment, the following situation. A software developer is undertaking a new project and has a policy, at least for this project, that all of their code must be closed source and proprietary. In the field of competitive software, there exists an open source program. For our concerns, the competitive proprietary products are irrelevant. Lets consider how the situation might play out different if the open source program is copyleft licenses, for example under the GPL, compared to how it would play out if the open source program is permissively licensed, for example under the BSD license.

Under the copyleft scenario, the developer is forced to weight their desire to keep all of their original code and modifications closed source and proprietary against the advantages of starting to build their program from an already existing one. However, there is a good chance that such a decision really isn’t a decision at all. If the developer makes their money using a business model that is dependent upon selling closed source, proprietary software, choosing to develop a copyleft program would force them to fundamentally change their business model, which because it wasn’t the decision in question, leaves them with no real decision at all. In many cases, the decisio of the business model is made by an employer rather than the programmer and so it isn't a decision even in their control. 

There are certainly examples of companies who do decide to change their business model to an open source one to develop copyleft software. However, in many of those cases building from existing copyleft programs isn’t an option because they require full ownership of the copyright to the software in order to sell proprietary licenses to the copyleft software the create.[1]

Even in cases where developers do choose to use copyleft software as a starting point, that doesn’t necessarily guarantee that all of their additional code will be made open source. That’s exactly what happened when Apple built their Safari web browser on the WebKit rendering engine and happens when any LGPL licensed library is used in proprietary softare. Of course in these cases, improvements and modifications to the copyleft code itself are required to have their source code shared.

Turning to the alternative permissive license scenario, the options that were available to the developer under the copyleft scenario are still available. They still could choose to not use the open source code as a starting point or they could choose to make all or part of their code open source. The difference of course being that making the code open source would be a purely voluntary choice on their part rather than a legal requirement. The permissive license also gives them an additional option, to keep modifications to the open source code closed and only release them as proprietary binaries.

The scenario will also operate on the assumption that there is at least some probably of the developer choosing to keep modifications to the open source code closed and that the availability of permissively licensed means that the odds of the developer choosing either to not use the open source software at all and the odds that some of the code will be made open are not only lower in the aggregate, but the probability of each decision individually is also lower.

Free software advocates have conventionally thought of the prospects of a developer taking open source code closed as a bad thing. At best, it would be no better than the developer having used entirely proprietary software that they either bought or wrote themselves, while at worst it was harmful to free software as a whole because it subsidized the development of non-free software and allowed proprietary developers to create a better product with less time, effort and expense. Such an attitude views software development as a race between free software and non-free software where copyleft code is an advantage for free software, any closed source code that only proprietary developers have access to is an advantage for close source software and permissively licensed code is neutral because it can be equally benefit both.

The Free Software Foundation provides the perfect example of this attitude when in an essay trying to convince programmers to use strong copyleft GPL for their next library rather than the weak copyleft LGPL when they wrote:

>Using the ordinary GPL is not advantageous for every library. There are reasons that can make it better to use the Lesser GPL in certain cases. The most common case is when a free library's features are readily available for proprietary software through other alternative libraries. In that case, the library cannot give free software any particular advantage, so it is better to use the Lesser GPL for that library.

>This is why we used the Lesser GPL for the GNU C library. After all, there are plenty of other C libraries; using the GPL for ours would have driven proprietary software developers to use another—no problem for them, only for us.

>However, when a library provides a significant unique capability, like GNU Readline, that's a horse of a different color. The Readline library implements input editing and history for interactive programs, and that's a facility not generally available elsewhere. Releasing it under the GPL and limiting its use to free programs gives our community a real boost. At least one application program is free software today specifically because that was necessary for using Readline.[106]

However, such a view is severely limited by both a short time horizon and the overly simplistic horse race metric of evaluation. 

That open source code serves as a Trojan Horse of sorts in the battle between closed and open source software. Inside are not enough soldiers to win the battle by themselves, but there are certainly enough to open the gates and allow the battle to take place without giving proprietary software any walls to hide behind. For those that believe the open source development process is superior to a closed one and thus tends to produce superior software, it is the walls that are to be feared, not the battle itself.

The flaw in the FSF logic is that it places the focus on providing advantages through added features to free software, rather than on ensuring that proprietary software doesn't gain any features that open source software will be unable or find extremely difficult to replicate or compete with. To extend my battle analogy, it is closed source software that needs to build legal and technical walls to fight behind because in an open field battle, the odds are overwhelmingly against them. Free and open source software doesn't need to build walls, just to draw out proprietary software from behind theirs because in open combat on a level field, proprietary software hardly stands a chance.

It is something that we have seen time and time throughout the relatively short history of consumer software markets. When web designers failed to start using proprietary ActiveX technology in their websites and thus allowed anyone to create servers and browsers with the features and capabilities demanded by Internet users, open source software came to be major competitors or dominate those markets.

In the scenario of a developer potentially building on permissively licensed software that the discussion has become momentarily distracted from, there are several important decisions that have already been made for the developer by virtue of choosing to build upon an existing piece of software. The programming language, libraries and other dependencies, and development tools will have already been chosen by the creator of the open source base. While code can be rewritten to add new closed dependencies of various kinds, but since doing so takes more work, the odds are certainly lower than if the code had been closed from the start. 

To illustrate the potential for these kinds of technologies to use patents to lock in programmers and by proxy the consumers that use their software, one must only look to the amount of time and effort Microsoft has put into developing languages like C# and Visual Basic, programming environ

For example, software that uses the multi-platform OpenGL to produce graphics could be rewritten to use Microsoft’s proprietary, Windows-only DirectX, but software is certainly more likely to end up using OpenGL if it is based upon code that is already using OpenGL.

In cases where there exist multiple competing formats for storing data, software built on an open source program will already have full support for the open format. For example, a productivity suite based upon Apache Open Office will already have full support for OpenDocument Formats. In contrast, Microsoft’s implementations of the formats in the 2007 version of Office had many problems and did not include full support of multiple features.[107] In theory, a developer could strip out support for open formats. However, we can only imagine the PR nightmare that would befall a company who made such a decision.[108]

Even when there are closed source changes that are made to previously open software, if it results in the final product being closed to open source software, the result can potentially have enormous implications for the open source community. For example, had Apple chosen to base OS X on Linux rather than NeXTSTEP,[109] which in turn was based partially on FreeBSD, even if all the changes were kept closed,[110] increased similarity could make it substantially easier for developers looking to port their OS X software over to Linux. For example, every additional similarity between the two operating systems could only help make it easier for Valve to create a Linux version of their Steam computer game distribution client and port over games to the Linux version of the Steam client.[111]

Similarities 
________________

[1] MySQL is one example of copyleft software that uses this business model.
[106] Free Software Foundation, “Why you shouldn't use the Lesser GPL for your next library”, 1999, accessed July 20, 2012, online at http://www.gnu.org/licenses/why-not-lgpl.html
[107] ODF Alliance, “MS Office 2007 Service Pack 2 With Support for ODF: How Well Does It Work?”, online at http://www.odfalliance.org/resources/fact-sheet-Microsoft-ODF-support.pdf
[108] And I hope there is a special place in hell reserved for someone who would do such a thing.
[109] Which they could not do and still keep their software closed source because Linux is licensed under the GPL v.2.
[110] Which interestingly enough they did not choose to do entirely. Instead releaseing some of the core code under a permissive license via the Darwin project.
[111] Valve, “Steam’d Penguins”, Valve Linux Blog, July 16, 2012, accessed July 21, 2012, online at http://blogs.valvesoftware.com/linux/

