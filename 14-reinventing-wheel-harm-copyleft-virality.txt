13. Reinventing the Wheel Harm and Copyleft Virality

The case for releasing software under the least restrictive license possible is easy to make to someone who already opposes copyrights and patents.
As many software creators have found, the advantages of open sourcing a project are tremendous. While there are many software developers who disagree with the idea that it is best to release their code under the least restrictive licenses possible, this book is ultimately not an attempt to persuade them to change their minds.

Perhaps the best model would be to consider all of the different kinds of developers and their licensing preferences. There are some developers that want all of their software to be distributed with a closed source proprietary license. Others will only use strong copyleft GPL licenses. Still others will use only use an open source license, irrespective of whether or not it is copyleft. Still others lack such strong convictions and may have a preference, but are willing to let anyone who pays them to code choose the license. It would be quite helpful to have some idea of the empirical number, code output and importance of the software developed by all these types of programmers. However, such data would be nearly impossible to collect and present in a useful format.

Even without the empirical data required to quantify the model, it can offer some insight. For now, we will deal with 3 groupings of software licenses and developers that prefer them, closed source proprietary licenses, open source copyleft licenses and open source permissive licenses.
We can assume with relative safety that there are a very small number of developers who would refrain from using permissively licensed software when it is available. There are even examples of Microsoft using BSD licensed code and Apple releases their core code back to the BSD community of operating systems via the Darwin project. Perhaps it is worth it to some to reinvent the wheel in order to be able to keep their code a secret, but when equivalent code is already made public and improvements can be kept closed source there is nearly no incentive to do so. 

Free software purists who will only use the GPL for their own code have empirically also been willing to create forks of more permissively licensed software. For example when OpenOffice.org was turned over the Apache Foundation and Apache licensed, free software advocates forked it and created the Document Foundation[91] and the LGPL licensed Libre Office.[92] There are also 2 major examples of permissively licensed software serving core functions within the free software suite of programs, the Apache server and the X11 Window System. The X11 Window System is the basis of almost all Linux desktop graphics user interfaces, such as Gnome and KDE, and therefore is found it nearly every Linux desktop distribution. It was developed by programmers at MIT in the 1980’s and is licensed under the copyfree MIT license.

By definition closed source proprietary software cannot be used in an open source project. There is the possibility that closed source code could be used in some part of a project along with open source software, however while that possibility does serve to mitigate the reinventing the wheel harm, that possibility would also exist for open source software. Thus, the only risk is that proprietary code could not be used and there would be reinventing the wheel harm.

The final possibility is the use of copyleft code to be modified by a developer who wants to create a proprietary or permissively licensed project. However as was explained in a previous chapter, not all copyleft code is the same. As the GNU Project explains in their case to use the GPL rather than the LGPL for certain code, the reason to use strong copyleft is explicitly to force developers who want to use other licenses to entirely duplicate the code.[93] The variations in copyleft lead a number of possibilities. In some cases, developers might want to make changes to code that even a weak copyleft would force them to open source and thus they will entirely reinvent the wheel. In others, using some weak copyleft code, such as a LGPL licensed library, that can be included in proprietary software would be fine. A prominent example of this case is Apple's Safari browser which uses the LGPL licensed Webkit rendering engine.

Though it was probably clear before this chapter even began, permissive licenses do the most to minimize reinventing the wheel harm as permissively licensed code can be used in any project, no matter the licensing requirements. Despite the apparent obviousness of the conclusion that permissive licensed work, the ideological implications of the ideology driving parts of the free software movement and the choice of most projects to use some variant of the GPL make it important to note that the claim is backed up by empirical research as well. A 2009 study of over 8,000 open source projects available on Sourceforge.net found that having restrictive copyleft licenses correlated with less activity in the project and fewer downloads when the target of the project was software developers.[94]

Before the discussion moves on[f], there is another related argument in favor of copyleft licenses that ought to be examined. One argument that advocates of copyleft make is that the licenses force derivativeworks to also release their source code under a free software license, thus increasing the amount and quality of free software. On the other side, some open source advocates have argued that copyleft licenses scare away potential allies who would be willing to use and contribute to open source projects.[95] In both cases, these arguments are reasons why more lines of code would be open sourced and therefore not have to be rewritten. In theory, if copyleft licenses could force enough closed source code to be made open, such licenses could result in a net reduction in reinventing the wheel harm.

In particular, the GNU Project justifies the more viral strong copyleft with the claim that if free software is good enough, some developers will choose to use the software and allow their code to be copylefted as well rather than do without the original copylefted software, thus increasing the pool of free software over what it would have been otherwise. Despite numerous successes in either getting companies to open source software under the GPL or in suing them for GPL violations, it is still unclear how well the strategy has worked.

Some GPL violations, such as a 2009 suit brought against Skype by gpl-violations.org in Germany, having nothing to do with whether or not code is made open source or released under the GPL, but rather with regards to other requirements of the GPL. In the Skype case, their failure was to include a copy of the GPL v.2 itself with a VOIP phone that was being sold.[96]

In others, code that may have been inadvertently mixed with GPL code forced the author to release the code. The problem with distinguishing such a case from one where the code was released under the GPL intentionally is that it is not often that a developer is going to admit they made a mistake and are only being forced to release code because employees didn't realize the full implications of building on GPL software.

Such is the case with Microsoft's 2009 release of three Linux drivers that improved performance when Linux is virtualized on Windows Server 2008 Hyper-V. Microsoft's press release heralded the move as goodwill to the open source community.[97] News reports of the incident reveal that Microsoft's mixing of GPL code and proprietary binary blobs was discovered by Vyatta software engineer Stephen Hemminger and only then did Microsoft open source the code in order to bring themselves in compliance with the GPL.[98]

Of course, Microsoft employee Sam Ramji wrote a blog post responding to the allegations that Microsoft's hand was forced by a GPL violation, claiming that "Microsoft chose the GPLv2 license for the mutual benefit of our customers, partners, the community, and Microsoft. Microsoft's decision was not based on any perceived obligations tied to the GPLv2 license."[99] That may have been true, but there is also no doubt that they were caught in a violation of the GPL and would have been forced to release the code if it went to court.

The evidence indicates that it is true that copyleft licenses like the GPL do force the releasing of source code that would not otherwise have been made available in some case. However, without an extensive empirical study that is beyond the scope of this book, the exact extent and effectiveness of the strategy remain uncertain.

On the other side, the argument that copyleft licenses scare away potential allies of open source is even more difficult to quantify in any meaningful way. It would be nearly impossible to come up with any kind of meaningful measure of the number of open source projects that developers and companies preferring proprietary code refused to participate in because of fears about copyleft licenses.

______________

[91] http://www.documentfoundation.org/faq/
[92] http://www.libreoffice.org/download/license/
[93] “Why you shouldn't use the Lesser GPL for your next library", Free Software Foundation, Inc. 1999, 2007, accessed June 18, 2012, online at http://www.gnu.org/licenses/why-not-lgpl.html
[94] Chandrasekar Subramaniam, Ravi Sen, and Matthew L. Nelson, “Determinants of open source software project success: A longitudinal study”, Decision Support Systems 46 (2009) 576–585.
[95] Eric S. Raymond, “The Economic Case Against the GPL”, April 26, 2009, accessed July 16, 2012, online at http://esr.ibiblio.org/?p=928
[96] Troy Unrau, "Skype loses GPL lawsuit in Germany", July 25 2007, accessed July 2, 2012, online at http://arstechnica.com/information-technology/2007/07/skype-loses-gpl-lawsuit-in-germany/
[97] Microsoft News Center, "Microsoft Contributes Linux Drivers to Linux Community", July 20, 2009, accessed July 2, 2012, online at http://www.microsoft.com/en-us/news/features/2009/Jul09/07-20LinuxQA.aspx. It is also interesting to note that the term "open source" appears over 30 times in the press release while the words free or freedom, much less the term "free software" are no where to be found. A telling sign about which side of the open source vs. free software debate that Microsoft falls on.
[98] Gordon Haff, "Microsoft's hand forced on open-source driver release", CNET, July, 23rd 2009, accessed July 2, 2012, online at http://news.cnet.com/8301-13556_3-10294282-61.html
[99] Sam Ramji, "Releasing the Linux Integration Component Drivers...", 23 Jul 2009, accessed July 3, 2012, online at http://blogs.technet.com/b/port25/archive/2009/07/23/releasing-the-linux-integration-component-drivers.aspx
